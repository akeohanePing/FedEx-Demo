{"ast":null,"code":"/** \nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with PingFederate\nauthentication-related API endpoints.\n\n@author Michael Sanchez\n*/\nclass PingAuthN {\n  constructor() {\n    this.pfAuthnAPIURI = \"/pf-ws/authn/flows/\";\n    this.pfPickupURI = \"/ext/ref/pickup?REF=\";\n  }\n\n  /** \n  AuthN API:\n  Authenticating user with AuthN API.\n   @param {string} method The HTTP request verb.\n  @param {string} flowId The flowId from the initiated AuthN API response.\n  @param {string} contentType The content type required for the submitted payload.\n  @param {object} body The payload to send in the API body in JSON format.\n  @return {object} The response JSON object.\n  */\n  authnAPI({\n    method,\n    flowId,\n    contentType,\n    payload,\n    action\n  }) {\n    console.info(\"PingAuthN.js\", \"Authenticating user with authN API.\");\n    let headers = new Headers();\n    headers.append('Accept', 'application/json');\n    headers.append('X-XSRF-Header', 'PingFederate');\n\n    if (contentType !== undefined) {\n      headers.append('Content-Type', contentType);\n    }\n\n    const requestOptions = {\n      headers: headers,\n      method: method,\n      body: payload,\n      credentials: 'include'\n    };\n    let url = this.pfAuthnAPIURI + flowId;\n\n    if (action !== undefined) {\n      url += \"?action=\" + action;\n    }\n\n    return fetch(url, requestOptions);\n  }\n  /** \n  Handle AuthN Flow:\n  Handler for different AuthN API flows. UI components shouldn't deal with\n  API calls. They just need to know about the user and what their next move is.\n   @param {object} flowResponse The response object in JSON format.\n  @param {string} identifier The userName or email of the authenticating user.\n  @param {string} swaprods The user's password if doing password authentication.\n  */\n\n\n  handleAuthNflow({\n    flowId,\n    flowResponse,\n    swaprods,\n    rememberMe,\n    body\n  }) {\n    console.info(\"PingAuthN.js\", \"Handling flow response from authN API.\");\n    console.info(\"FlowResponse was\", JSON.stringify(flowResponse));\n    let payload = '{}';\n\n    if (!flowResponse) {\n      flowResponse = {};\n    } //This won't exist if we only get a flowId. So create it to let switch/case default kick in.\n\n\n    switch (flowResponse.status) {\n      case \"IDENTIFIER_REQUIRED\":\n        console.info(\"PingAuthN.js\", \"IDENTIFIER_REQUIRED\");\n        payload = '{\\n  \\\"identifier\\\": \\\"' + body + '\\\"\\n}';\n        return this.authnAPI({\n          method: \"POST\",\n          flowId: flowResponse.id,\n          contentType: \"application/vnd.pingidentity.submitIdentifier+json\",\n          payload: payload\n        });\n        break;\n\n      case \"USERNAME_PASSWORD_REQUIRED\":\n        console.info(\"PingAuthN.js\", \"USERNAME_PASSWORD_REQUIRED\");\n        payload = '{\\n \\\"username\\\": \\\"' + flowResponse.username + '\\\", \\\"password\\\": \\\"' + swaprods + '\\\", \\\"rememberMyUsername\\\": \\\"' + rememberMe + '\\\", \\\"captchaResponse\\\": \\\"\\\" \\n}';\n        return this.authnAPI({\n          method: \"POST\",\n          flowId: flowResponse.id,\n          contentType: \"application/vnd.pingidentity.checkUsernamePassword+json\",\n          payload: payload\n        });\n        break;\n\n      case \"AUTHENTICATION_REQUIRED\":\n        console.info(\"PingAuthN.js\", \"AUTHENTICATION_REQUIRED\");\n        payload = '{' + body + '}';\n        return this.authnAPI({\n          method: \"POST\",\n          flowId: flowResponse.id,\n          contentType: \"application/vnd.pingidentity.authenticate+json\",\n          payload: payload\n        });\n        break;\n\n      case \"DEVICE_SELECTION_REQUIRED\":\n        console.info(\"PingAuthN.js\", \"DEVICE_SELECTION_REQUIRED\");\n        payload = '{\\n \\\"deviceRef\\\": {\\n \\\"id\\\":\\\"' + body + '\\\" \\n} \\n}';\n        return this.authnAPI({\n          method: \"POST\",\n          flowId: flowResponse.id,\n          payload: payload,\n          action: \"selectDevice\"\n        });\n        break;\n\n      case \"OTP_REQUIRED\":\n        console.info(\"PingAuthN.js\", \"OTP_REQUIRED\");\n        payload = '{\\n \\\"otp\\\": \\\"' + body + '\\\" \\n}';\n        return this.authnAPI({\n          method: \"POST\",\n          flowId: flowResponse.id,\n          payload: payload,\n          action: \"checkOtp\"\n        });\n        break;\n      // this case is a placeholder for mobile push. Needs to be updated.\n\n      case \"PUSH_CONFIRMATION_WAITING\":\n        console.info(\"PingAuthN.js\", \"fubar_REQUIRED\");\n        return this.authnAPI({\n          method: \"POST\",\n          flowId: flowResponse.id,\n          action: \"poll\"\n        });\n        break;\n\n      case \"MFA_COMPLETED\":\n        console.info(\"PingAuthN.js\", \"MFA_COMPLETED\");\n        payload = '{' + body + '}';\n        return this.authnAPI({\n          method: \"POST\",\n          flowId: flowResponse.id,\n          payload: payload,\n          action: \"continueAuthentication\"\n        });\n        break;\n\n      case \"DEVICE_PROFILE_REQUIRED\":\n        console.info(\"PingAuthN.js\", \"DEVICE_PROFILE_REQUIRED\");\n        console.info(\"Device Profile\", body);\n        payload = body;\n        return this.authnAPI({\n          method: \"POST\",\n          flowId: flowResponse.id,\n          payload: payload,\n          action: \"submitDeviceProfile\"\n        });\n        break;\n\n      case \"RESUME\":\n        console.info(\"PingAuthN.js\", \"Authentication complete. Redirecting to resumeURL.\");\n        window.location.assign(flowResponse.resumeUrl);\n        break;\n\n      case \"FAILED\":\n        console.warn(\"PingAuthN.js\", flowResponse.message);\n        return flowResponse;\n\n      default:\n        // Just started the authN API flow, only have a flowId.\n        console.info(\"PingAuthN.js\", \"Starting authN API flow.\");\n        return this.authnAPI({\n          method: \"GET\",\n          flowId: flowId\n        });\n    }\n  }\n  /** \n  Pick Up API:\n  Agentless Integration Kit Pickup endpoint.\n   @param {string} REF The ref Id returned with the authenticated user.\n  @return {object} The response JSON object.\n  */\n\n\n  pickUpAPI(REF, adapter) {\n    console.info(\"PingAuthN.js\", \"Attribute pickup from Agentless IK.\");\n    const refId = REF;\n    const myHeaders = new Headers();\n    myHeaders.append(\"ping.instanceid\", adapter);\n    myHeaders.append(\"Authorization\", \"Basic cmVhY3QtdXNlcjoyRmVkZXJhdGVNMHJl\");\n    /* TODO should we obfuscate somehow. */\n\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      credentials: 'include'\n    };\n    const url = this.pfPickupURI + refId;\n    return fetch(url, requestOptions);\n  }\n\n}\n\nexport default PingAuthN;","map":{"version":3,"sources":["/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/src/components/Integration/PingAuthN.js"],"names":["PingAuthN","pfAuthnAPIURI","pfPickupURI","authnAPI","method","flowId","contentType","payload","action","console","info","headers","Headers","append","undefined","requestOptions","body","credentials","url","fetch","handleAuthNflow","flowResponse","swaprods","rememberMe","JSON","stringify","status","id","username","window","location","assign","resumeUrl","warn","message","pickUpAPI","REF","adapter","refId","myHeaders"],"mappings":"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","sourcesContent":["/** \nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with PingFederate\nauthentication-related API endpoints.\n\n@author Michael Sanchez\n*/\n\nclass PingAuthN {\n\n    // Didn't abstract these since they shouldn't ever change.\n    pfAuthnAPIURI = \"/pf-ws/authn/flows/\";\n    pfPickupURI = \"/ext/ref/pickup?REF=\";\n\n    /** \n    AuthN API:\n    Authenticating user with AuthN API.\n\n    @param {string} method The HTTP request verb.\n    @param {string} flowId The flowId from the initiated AuthN API response.\n    @param {string} contentType The content type required for the submitted payload.\n    @param {object} body The payload to send in the API body in JSON format.\n    @return {object} The response JSON object.\n    */\n    authnAPI({ method, flowId, contentType, payload, action }) {\n        console.info(\"PingAuthN.js\", \"Authenticating user with authN API.\");\n\n        let headers = new Headers();\n        headers.append('Accept', 'application/json');\n        headers.append('X-XSRF-Header', 'PingFederate');\n        if (contentType !== undefined) { headers.append('Content-Type', contentType); }\n\n        const requestOptions = {\n            headers: headers,\n            method: method,\n            body: payload,\n            credentials: 'include'\n        }\n        let url = this.pfAuthnAPIURI + flowId;\n        if (action !== undefined) { url += \"?action=\" + action; }\n        return fetch(url, requestOptions);\n    }\n\n    /** \n    Handle AuthN Flow:\n    Handler for different AuthN API flows. UI components shouldn't deal with\n    API calls. They just need to know about the user and what their next move is.\n\n    @param {object} flowResponse The response object in JSON format.\n    @param {string} identifier The userName or email of the authenticating user.\n    @param {string} swaprods The user's password if doing password authentication.\n    */\n    handleAuthNflow({ flowId, flowResponse, swaprods, rememberMe, body }) {\n        console.info(\"PingAuthN.js\", \"Handling flow response from authN API.\");\n        console.info(\"FlowResponse was\", JSON.stringify(flowResponse));\n\n        let payload = '{}';\n        if (!flowResponse) { flowResponse = {}; } //This won't exist if we only get a flowId. So create it to let switch/case default kick in.\n        switch (flowResponse.status) {\n            case \"IDENTIFIER_REQUIRED\":\n                console.info(\"PingAuthN.js\", \"IDENTIFIER_REQUIRED\");\n                payload = '{\\n  \\\"identifier\\\": \\\"' + body + '\\\"\\n}';\n                return this.authnAPI({ method: \"POST\", flowId: flowResponse.id, contentType: \"application/vnd.pingidentity.submitIdentifier+json\", payload: payload });\n                break;\n            case \"USERNAME_PASSWORD_REQUIRED\":\n                console.info(\"PingAuthN.js\", \"USERNAME_PASSWORD_REQUIRED\");\n                payload = '{\\n \\\"username\\\": \\\"' + flowResponse.username + '\\\", \\\"password\\\": \\\"' + swaprods + '\\\", \\\"rememberMyUsername\\\": \\\"' + rememberMe + '\\\", \\\"captchaResponse\\\": \\\"\\\" \\n}';\n                return this.authnAPI({ method: \"POST\", flowId: flowResponse.id, contentType: \"application/vnd.pingidentity.checkUsernamePassword+json\", payload: payload });\n                break;\n            case \"AUTHENTICATION_REQUIRED\":\n                console.info(\"PingAuthN.js\", \"AUTHENTICATION_REQUIRED\");\n                payload = '{' + body + '}';\n                return this.authnAPI({ method: \"POST\", flowId: flowResponse.id, contentType: \"application/vnd.pingidentity.authenticate+json\", payload: payload });\n                break;\n            case \"DEVICE_SELECTION_REQUIRED\":\n                console.info(\"PingAuthN.js\", \"DEVICE_SELECTION_REQUIRED\");\n                payload = '{\\n \\\"deviceRef\\\": {\\n \\\"id\\\":\\\"' + body + '\\\" \\n} \\n}';\n                return this.authnAPI({ method: \"POST\", flowId: flowResponse.id, payload: payload, action: \"selectDevice\" });\n                break;\n            case \"OTP_REQUIRED\":\n                console.info(\"PingAuthN.js\", \"OTP_REQUIRED\");\n                payload = '{\\n \\\"otp\\\": \\\"' + body + '\\\" \\n}';\n                return this.authnAPI({ method: \"POST\", flowId: flowResponse.id, payload: payload, action: \"checkOtp\" });\n                break;\n                // this case is a placeholder for mobile push. Needs to be updated.\n            case \"PUSH_CONFIRMATION_WAITING\":\n                console.info(\"PingAuthN.js\", \"fubar_REQUIRED\");\n                return this.authnAPI({ method: \"POST\", flowId: flowResponse.id, action: \"poll\" });\n                break;\n            case \"MFA_COMPLETED\":\n                console.info(\"PingAuthN.js\", \"MFA_COMPLETED\");\n                payload = '{' + body + '}';\n                return this.authnAPI({ method: \"POST\", flowId: flowResponse.id, payload: payload, action: \"continueAuthentication\" });\n                break;\n            case \"DEVICE_PROFILE_REQUIRED\":\n                console.info(\"PingAuthN.js\", \"DEVICE_PROFILE_REQUIRED\");\n                console.info(\"Device Profile\", body);\n                payload = body;\n                return this.authnAPI({ method: \"POST\", flowId: flowResponse.id, payload: payload, action: \"submitDeviceProfile\" });\n                break;\n            case \"RESUME\":\n                console.info(\"PingAuthN.js\", \"Authentication complete. Redirecting to resumeURL.\");\n                window.location.assign(flowResponse.resumeUrl);\n                break;\n            case \"FAILED\":\n                console.warn(\"PingAuthN.js\", flowResponse.message);\n                return flowResponse;\n            default: // Just started the authN API flow, only have a flowId.\n                console.info(\"PingAuthN.js\", \"Starting authN API flow.\");\n                return this.authnAPI({ method: \"GET\", flowId: flowId });\n        }\n    }\n\n    /** \n    Pick Up API:\n    Agentless Integration Kit Pickup endpoint.\n\n    @param {string} REF The ref Id returned with the authenticated user.\n    @return {object} The response JSON object.\n    */\n    pickUpAPI(REF, adapter) {\n        console.info(\"PingAuthN.js\", \"Attribute pickup from Agentless IK.\");\n\n        const refId = REF;\n        const myHeaders = new Headers();\n        myHeaders.append(\"ping.instanceid\", adapter);\n        myHeaders.append(\"Authorization\", \"Basic cmVhY3QtdXNlcjoyRmVkZXJhdGVNMHJl\"); /* TODO should we obfuscate somehow. */\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            credentials: 'include'\n        };\n\n        const url = this.pfPickupURI + refId\n\n        return fetch(url, requestOptions);\n    }\n}\n\nexport default PingAuthN;\n"]},"metadata":{},"sourceType":"module"}