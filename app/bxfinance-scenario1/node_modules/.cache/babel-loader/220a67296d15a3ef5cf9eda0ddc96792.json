{"ast":null,"code":"import _regeneratorRuntime from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with PingData\nAPI endpoints.\n\n@author Michael Sanchez\n*/var PingData=/*#__PURE__*/function(){function PingData(){_classCallCheck(this,PingData);this.pdReSTURI=\"/directory/v1/\";this.pdRootDN=\"dc=fedex.com\";this.pdPeopleRDN='ou=People,'+this.pdRootDN;this.pdConsentURI=\"/consent\";this.pdConsentVersion=\"/v1\";this.pdConsentResource=\"/consents\";this.pdSubtreeResource=\"/subtree?\";this.dgScimURI=\"/scim\";this.dgScimVersion=\"/v2\";this.dgUsersResource=\"/Users\";this.dgOpenBankingURI=\"/OpenBanking\";this.dgOpenBankingVersion=\"/v2\";this.dgBalancesResource=\"/balances\";}_createClass(PingData,[{key:\"getUserEntry\",/** \n    Get User Entry:\n    Fetches a user record from PingDirectory.\n\n    @param {string} uid The uid from the user's directory entry.\n    @return {object} The response object.\n    */value:function getUserEntry(uid){var userRDN='uid='+encodeURIComponent(uid);var myHeaders=new Headers();myHeaders.append(\"Content-Type\",\"application/json\");myHeaders.append(\"Authorization\",\"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\");/* TODO this should be obfuscated somehow. */var requestOptions={method:'GET',headers:myHeaders,redirect:'manual'};var url=this.pdReSTURI+userRDN+','+this.pdPeopleRDN;return fetch(url,requestOptions);}/** \n    Update User Entry:\n    Update user entry with bank accounts.\n\n    @param {array} acctIds An array of account IDs to add to the user entry.\n    @param {string} uid The uid of the user for which we are updating a user entry.\n    @return {boolean} Success state of the user account update.\n    */},{key:\"updateUserEntry\",value:function(){var _updateUserEntry=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(acctIds,uid){var userRDN,myHeaders,updateObj,raw,requestOptions,url,response,jsonData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.info(\"PingData.js\",\"Updating user entry in PD.\");userRDN='uid='+uid;myHeaders=new Headers();myHeaders.append(\"Content-Type\",\"application/json\");myHeaders.append(\"Authorization\",\"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\");updateObj={\"modifications\":[{\"attributeName\":\"bxFinanceUserAccountIDs\",\"modificationType\":\"set\",\"values\":[{\"ids\":[]}]}]};updateObj.modifications[0].values[0].ids=acctIds;raw=JSON.stringify(updateObj);requestOptions={method:'PATCH',headers:myHeaders,body:raw,redirect:'follow'};//TODO add error handling here in case failed requset. Rare in our environment, butt still.\nurl=this.pdReSTURI+userRDN+','+this.pdPeopleRDN;_context.next=12;return fetch(url,requestOptions);case 12:response=_context.sent;_context.next=15;return response.json();case 15:jsonData=_context.sent;return _context.abrupt(\"return\",Promise.resolve(jsonData));case 17:case\"end\":return _context.stop();}}},_callee,this);}));function updateUserEntry(_x,_x2){return _updateUserEntry.apply(this,arguments);}return updateUserEntry;}()/** \n    Get Searchable Users:\n    Fetches all users in the people DN for the suggestable search feature in the AnyAdvisor/Marketing portals.\n    We filter out user that have the attribute bxFinanceUserType, because they are not banking users, but partners in the demo.\n\n    @param {string} searchScope To what level in the directory to searchScope. Defaults to single level.\n    @param {number} limit The max number of records to return. You could get less based on number of records found or PingDirectory-configured limits. Defaults to 100.\n    @return {object} The response JSON object.\n    */},{key:\"getSearchableUsers\",value:function getSearchableUsers(_ref){var _ref$searchScope=_ref.searchScope,searchScope=_ref$searchScope===void 0?\"singleLevel\":_ref$searchScope,_ref$limit=_ref.limit,limit=_ref$limit===void 0?\"100\":_ref$limit;console.info(\"PingData.js\",\"Getting all searchable users (banking customers) from PD.\");var myHeaders=new Headers();myHeaders.append(\"Authorization\",\"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\");var requestOptions={method:'GET',headers:myHeaders,redirect:'follow'};// TODO we need some attribute or way to filter user to only include ones created for demos.\nvar url=this.pdReSTURI+this.pdPeopleRDN+this.pdSubtreeResource+\"searchScope=\"+searchScope+\"&limit=\"+limit+\"&filter=not(bxFinanceUserType pr)\";return fetch(url,requestOptions);}/** \n    Get User Consents:\n    This is called from customer apps for consent management from PingDirectory.\n\n    @param {string} token The access token for the authenticated user.\n    @param {string} uid The user's uid from their user record.\n    @param {string} definition The consent definition ID.\n    @return {object} Consent record in JSON format.\n    */},{key:\"getUserConsents\",value:function getUserConsents(token,uid,definition){console.info(\"PingData.js\",\"Getting user's consents from PD.\");var myHeaders=new Headers();myHeaders.append(\"Authorization\",\"Bearer \"+token);var requestOptions={method:'GET',headers:myHeaders,redirect:'follow'};var url=this.pdConsentURI+this.pdConsentVersion+this.pdConsentResource+\"?subject=\"+encodeURIComponent(uid)+\"&definition=\"+definition;return fetch(url,requestOptions);}/** \n    Create User Consent:\n    Creates the user's consent record in PingDirectory. \n\n    @param {string} token The access token for the authenticated user.\n    @param {object} consent The JSON object of consents to update the \"data\" property of the consent object.\n    @param {string} uid The uid of the user fo which we are creating a consent record.\n    @param {string} definition The consent definition ID.\n    @return {object} Consent record in JSON format.\n    */},{key:\"createUserConsent\",value:function createUserConsent(token,consent,uid,definition){console.info(\"PingData.js\",\"Creating user's consent record in PD.\");var myHeaders=new Headers();var consentObject={};var raw=\"\";myHeaders.append(\"Authorization\",\"Bearer \"+token);myHeaders.append(\"Content-Type\",\"application/json\");//  We build the consent object template for the specified definition, and then update the data field with user's consent choices.\nif(definition==\"share-account-balances\"){consentObject={\"status\":\"accepted\",\"subject\":\"\",\"actor\":\"\",\"audience\":\"BXFinance\",\"definition\":{\"id\":\"\",\"version\":\"0.1\",\"locale\":\"en-us\"},\"titleText\":\"Share Account Balances\",\"dataText\":\"Share Account Balances\",\"purposeText\":\"Share Account Balances\",\"data\":{\"share-balance\":[]},\"consentContext\":{}};consentObject.subject=uid;consentObject.actor=uid;consentObject.data[\"share-balance\"]=consent;consentObject.definition.id=definition;}else{//share-comm-preferences\nconsentObject={\"status\":\"accepted\",\"subject\":\"\",\"actor\":\"\",\"audience\":\"BXFinance\",\"definition\":{\"id\":\"\",\"version\":\"0.1\",\"locale\":\"en-us\"},\"titleText\":\"Share Comms Preferences\",\"dataText\":\"Share Comms Preferences\",\"purposeText\":\"Share Comms Preferences\",\"data\":{},\"consentContext\":{}};consentObject.subject=uid;consentObject.actor=uid;consentObject.data=consent;consentObject.definition.id=definition;}raw=JSON.stringify(consentObject);var requestOptions={method:'POST',headers:myHeaders,body:raw,redirect:'follow'};var url=this.pdConsentURI+this.pdConsentVersion+this.pdConsentResource;return fetch(url,requestOptions);}/** \n    Update User Consent:\n    Updates the user's consent record in PingDirectory.\n\n    @param {string} token The access token for the authenticated user.\n    @param {object} consent The JSON object of consents to update the \"data\" property of the consent object.\n    @param {string} consentId The id of the user's existing consent record.\n    @param {string} definition The consent definition ID.\n    @return {object} Consent record in JSON format.\n    */},{key:\"updateUserConsent\",value:function updateUserConsent(token,consent,consentId,definition){console.info(\"PingData.js\",\"Updating user's consent record' in PD.\");var myHeaders=new Headers();var consentObject={\"data\":{}};var raw=\"\";myHeaders.append(\"Authorization\",\"Bearer \"+token);myHeaders.append(\"Content-Type\",\"application/json\");console.info(\"Updating it to:\",consent);//  We build the consent object template for the specified definition, and then update the data field with user's consent choices.\nif(definition==\"share-account-balances\"){var status=consent.length>0?\"accepted\":\"revoked\";consentObject={\"status\":status,\"data\":{\"share-balance\":[]}};consentObject.data[\"share-balance\"]=consent;}else{//share-comm-preferences\nvar _status=\"revoked\";var consentValues=Object.values(consent);_status=consentValues.find(function(val){return val===true;})?\"accepted\":\"revoked\";consentObject={\"status\":_status,\"data\":{}};consentObject.data=consent;}raw=JSON.stringify(consentObject);var requestOptions={method:'PATCH',headers:myHeaders,body:raw,redirect:'follow'};var url=this.pdConsentURI+this.pdConsentVersion+this.pdConsentResource+\"/\"+consentId;return fetch(url,requestOptions);}/** \n    Get User Consented Data:\n    This is called from AnyWealth Advisor and AnyMarketing portals. Uses DataGovernance for consent enforcement.\n    \n    @param {string} token The access token of the marketingApp.\n    @param {string} forWhom Whether this DataGovernance call is for an AnyWealthAdvisor or AnyMarketing rep.\n    @param {string} uid The uid of the user data being requested.\n    @return {object} The response JSON object.\n    */},{key:\"getUserConsentedData\",value:function(){var _getUserConsentedData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(token,forWhom,uid){var myHeaders,url,requestOptions,filterValue,response,jsonResponse;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.info(\"PingData.js\",\"Getting consented data through DG.\");myHeaders=new Headers();myHeaders.append(\"Authorization\",\"Bearer \"+token);requestOptions={method:'GET',headers:myHeaders,redirect:'follow'};if(forWhom==\"marketing\"){console.info(\"Getting AnyMarketing consent data.\");filterValue='\\\"'+uid+'\\\"';url=this.dgScimURI+this.dgScimVersion+this.dgUsersResource+\"?filter=uid eq \"+encodeURIComponent(filterValue);}else{//advisor\nconsole.info(\"Getting AnyWealth Advisor consent data.\");url=this.dgOpenBankingURI+this.dgOpenBankingVersion+this.dgBalancesResource;}_context2.next=7;return fetch(url,requestOptions);case 7:response=_context2.sent;_context2.next=10;return response.json();case 10:jsonResponse=_context2.sent;return _context2.abrupt(\"return\",jsonResponse);case 12:case\"end\":return _context2.stop();}}},_callee2,this);}));function getUserConsentedData(_x3,_x4,_x5){return _getUserConsentedData.apply(this,arguments);}return getUserConsentedData;}()}]);return PingData;}();;export default PingData;","map":null,"metadata":{},"sourceType":"module"}