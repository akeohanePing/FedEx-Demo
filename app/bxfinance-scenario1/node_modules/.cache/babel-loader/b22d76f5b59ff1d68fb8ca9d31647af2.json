{"ast":null,"code":"import _classCallCheck from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with the browser\nsession storage API to maintain user state during\nan authenticated session.\n\n@author Michael Sanchez\n@see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage}\n*/var Session=/*#__PURE__*/function(){function Session(){_classCallCheck(this,Session);}_createClass(Session,[{key:\"protectPage\",/** \n    Protect Page:\n    Ensures a user doesn't access pages when unauthenticated or \n    when not the right user type. As a Single Page Application (SPA), page requests do not\n    run through PingAccess, (not HTTP requests), so we need to replicate those access rules.\n\n    @param {boolean} loggedOut Whether the user is logged in or not.\n    @param {string} path Where the user is trying to go.\n    @param {string} userType AnyWealthAdvisor, AnyMarketing, or customer.\n    */value:function protectPage(loggedOut,path,userType){var advisorAllowedPaths=[\"/app/advisor\",\"/app/advisor/client\",\"/app/advisor/tracking\",\"/app/advisor/prospecting\",\"/app/advisor/other-services\"];var marketingAllowedPaths=[\"/app/any-marketing\",\"/app/any-marketing/dashboard\",\"/app/any-marketing/client-profiles\",\"/app/any-marketing/tracking\",\"/app/any-marketing/equities-trading\"];var homePaths=[\"/app/\",\"/app\"];console.info(\"Session.js\",\"Checking access rules for type \"+userType+\" at \"+path);//They have to be logged in to be anywhere other than home.\nif(loggedOut&&!homePaths.includes(path)){console.info(\"Access rule\",\"Attempting to access protected page as unauthenticated user. Redirecting to home.\");window.location.assign(homePaths[0]);}else{switch(userType){case\"AnyWealthAdvisor\":if(!advisorAllowedPaths.includes(path)){console.info(\"Access Rule\",\"Attempt to access disallowed path for user type \"+userType+\". Redirecting to default.\");window.location.assign(advisorAllowedPaths[0]);}break;case\"AnyMarketing\":if(!marketingAllowedPaths.includes(path)){console.info(\"Access Rule\",\"Attempt to access disallowed path for user type \"+userType+\". Redirecting to default.\");window.location.assign(marketingAllowedPaths[0]);}break;case\"customer\":if(advisorAllowedPaths.includes(path)||marketingAllowedPaths.includes(path)){console.info(\"Access Rule\",\"Attempt to access disallowed path for user type \"+userType+\". Redirecting to default.\");window.location.assign(\"/\");//Default for a logged in user\n}break;default:console.warn(\"Unknown bxFinanceUserType\",\"Not authenticated yet.\");}}}/** \n    Get Authenticated User Item:\n    Gets an item from the current origin's session storage.\n\n    @param {string} key The item name in storage.\n    @return {string} DOM String.\n    */},{key:\"getAuthenticatedUserItem\",value:function getAuthenticatedUserItem(key){console.info(\"Session.js\",\"Getting a item from local browser session.\");return sessionStorage.getItem(key);}/** \n    Set Authenticated User Item:\n    Sets an item in the current origin's sessions storage.\n\n    @param {string} key The item name to set in storage.\n    @param {string} value The string value of the key.\n    @return {boolean} Success state of item storage.\n    @throws {storageFullException} Particularly, in Mobile Safari \n                                (since iOS 5) it always throws when \n                                the user enters private mode. \n                                (Safari sets the quota to 0 bytes in \n                                private mode, unlike other browsers, \n                                which allow storage in private mode \n                                using separate data containers.)\n    */},{key:\"setAuthenticatedUserItem\",value:function setAuthenticatedUserItem(key,value){console.info(\"Session.js\",\"Saving an item into local browser session.\");sessionStorage.setItem(key,value);return true;}/** \n    Remove Authenticated User Item:\n    Removes an item from the current origin's session storage.\n\n    @param {string} key The item name in storage to remove.\n    @return {boolean} Success state of item removal from storage.\n    */},{key:\"removeAuthenticatedUserItem\",value:function removeAuthenticatedUserItem(key){console.info(\"Session.js\",\"Removing an item from local browser session.\");sessionStorage.removeItem(key);return true;}/** \n    Clear User App Session:\n    Clears out everything in the current origin's session storage.\n\n    @return {void} Void. \n     */},{key:\"clearUserAppSession\",value:function clearUserAppSession(){console.info(\"Session.js\",\"Removing local browser session.\");sessionStorage.clear();}/** \n    Get Cookie:\n    We set a cookie when users check \"Remember Me\" when logging in.\n    We need to check for this cookie in a couple different places to set state.\n    \n    @param {string} cookieName The name of the cookie we want the value of.\n    @return {string} Cookie value, or an empty string if not found.\n    */},{key:\"getCookie\",value:function getCookie(cookieName){console.info(\"Session.js\",\"Getting a cookie value from the browser.\");var name=cookieName+\"=\";var decodedCookie=decodeURIComponent(document.cookie);var ca=decodedCookie.split(';');for(var i=0;i<ca.length;i++){var c=ca[i];while(c.charAt(0)==' '){c=c.substring(1);}if(c.indexOf(name)==0){return c.substring(name.length,c.length);}}return\"\";}}]);return Session;}();;export default Session;","map":null,"metadata":{},"sourceType":"module"}