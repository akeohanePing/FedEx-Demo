{"ast":null,"code":"/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with \nDavid Babbit's mock OpenBanking APIs, hosted on Heroku.\nI like to call it the OpenBabbitt API.\n\n@author Michael Sanchez\n@see {@link https://github.com/babbtx/mock-simple-aspsp}\n*/\nclass OpenBanking {\n  /**\n  Configurations for the OpenBanking API. \n   @property {string} mockOBConsentHost Consent OpenBanking host /OpenBanking pointing to DataGovernance to secure data for consent enforcement.\n  @property {string} mockOBhost OpenBaking API host.\n  @property {string} mockOBAPIver OpenBanking API version.\n  @property {string} mockOBbalURI OpenBanking API account balances path.\n  @property {string} mockOBacctsURI OpenBanking API accounts path.\n  @property {string} xfrMoneyURI OpenBanking API transfer money path.\n  */\n  constructor() {\n    // Didn't abstract these since they shouldn't ever change. I say that now.\n    this.mockOBhost = \"https://babbtx-aspsp.herokuapp.com/OpenBanking\";\n    this.mockOBAPIver = \"/v2\";\n    this.mockOBbalURI = \"/balances\";\n    this.mockOBacctsURI = \"/accounts\";\n    this.xfrMoneyURI = \"/transferMoney?amount=\";\n  }\n  /** \n    Provision Banking Accounts:\n    Provisions new accounts and balances and updates the user entry in PingDirectory.\n    Design pattern debate: Whether to just return the accounts response (strict single responsiblilty), or\n    or as is now, fulfills all tasks of \"provisioning an acct\", which should include upating the user entry.\n     @param {string} token The access token for the authenticated user.\n    @return {object} The response JSON object.\n    */\n\n\n  async provisionAccounts(token) {\n    //If we had to time to be cool, we could have extracted the uid from the token.\n    console.info(\"OpenBanking.js\", \"Provisioning bank accounts.\");\n    let acctIdsArr = [];\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n    var requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n    const url = this.mockOBhost + this.mockOBAPIver + this.mockOBacctsURI;\n    const response = await fetch(url, requestOptions);\n    const jsonData = await response.json();\n    return Promise.resolve(jsonData);\n  }\n  /** \n    Get Account Balances:\n    Retreives account balances to display on the Accounts Dashboard.\n     @param {string} token The access token for the authenticated user.\n    @return {object} The response JSON object.\n    */\n\n\n  getAccountBalances(token) {\n    console.info(\"OpenBanking.js\", \"Getting bank account balances.\");\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n    var requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n    const url = this.mockOBhost + this.mockOBAPIver + this.mockOBbalURI;\n    return fetch(url, requestOptions);\n  }\n  /** \n  Transfer Money:\n  Initiates a money transfer between accounts.\n   @param {number} amount The dollar amount the user wants to transfer.\n  @param {string} token The access token from PF for the authenticated user.\n  @return {boolean} Success state of the transfer.\n  */\n\n\n  transferMoney(amount, token) {\n    console.info(\"OpenBanking.js\", \"Transferring money.\");\n    let myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n    const requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n    const url = this.xfrMoneyURI + amount;\n    return fetch(url, requestOptions);\n  }\n\n}\n\n;\nexport default OpenBanking;","map":{"version":3,"sources":["/Users/michaelsanchez/projects/TechnicalEnablement/fedex/BXFinance-Apps/bxfinance-scenario1/src/components/Integration/OpenBanking.js"],"names":["OpenBanking","constructor","mockOBhost","mockOBAPIver","mockOBbalURI","mockOBacctsURI","xfrMoneyURI","provisionAccounts","token","console","info","acctIdsArr","myHeaders","Headers","append","requestOptions","method","headers","redirect","url","response","fetch","jsonData","json","Promise","resolve","getAccountBalances","transferMoney","amount"],"mappings":"AAAA;;;;;;;;;;AAWA,MAAMA,WAAN,CAAkB;AAEd;;;;;;;;;AAUAC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,UAAL,GAAkB,gDAAlB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,YAAL,GAAoB,WAApB;AACA,SAAKC,cAAL,GAAsB,WAAtB;AACA,SAAKC,WAAL,GAAmB,wBAAnB;AACH;AAED;;;;;;;;;;AASA,QAAMC,iBAAN,CAAwBC,KAAxB,EAA+B;AAC3B;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,gBAAb,EAA+B,6BAA/B;AAEA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,eAAjB,EAAkC,YAAYN,KAA9C;AAEA,QAAIO,cAAc,GAAG;AACjBC,MAAAA,MAAM,EAAE,KADS;AAEjBC,MAAAA,OAAO,EAAEL,SAFQ;AAGjBM,MAAAA,QAAQ,EAAE;AAHO,KAArB;AAKA,UAAMC,GAAG,GAAG,KAAKjB,UAAL,GAAkB,KAAKC,YAAvB,GAAsC,KAAKE,cAAvD;AAEA,UAAMe,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,EAAMJ,cAAN,CAA5B;AACA,UAAMO,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACA,WAAOC,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACH;AAED;;;;;;;;AAOAI,EAAAA,kBAAkB,CAAClB,KAAD,EAAQ;AACtBC,IAAAA,OAAO,CAACC,IAAR,CAAa,gBAAb,EAA+B,gCAA/B;AAEA,QAAIE,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,eAAjB,EAAkC,YAAYN,KAA9C;AAEA,QAAIO,cAAc,GAAG;AACjBC,MAAAA,MAAM,EAAE,KADS;AAEjBC,MAAAA,OAAO,EAAEL,SAFQ;AAGjBM,MAAAA,QAAQ,EAAE;AAHO,KAArB;AAKA,UAAMC,GAAG,GAAG,KAAKjB,UAAL,GAAkB,KAAKC,YAAvB,GAAsC,KAAKC,YAAvD;AACA,WAAOiB,KAAK,CAACF,GAAD,EAAMJ,cAAN,CAAZ;AACH;AAED;;;;;;;;;AAQAY,EAAAA,aAAa,CAACC,MAAD,EAASpB,KAAT,EAAgB;AACzBC,IAAAA,OAAO,CAACC,IAAR,CAAa,gBAAb,EAA+B,qBAA/B;AAEA,QAAIE,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAiB,eAAjB,EAAkC,YAAYN,KAA9C;AAEA,UAAMO,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,KADW;AAEnBC,MAAAA,OAAO,EAAEL,SAFU;AAGnBM,MAAAA,QAAQ,EAAE;AAHS,KAAvB;AAKA,UAAMC,GAAG,GAAG,KAAKb,WAAL,GAAmBsB,MAA/B;AACA,WAAOP,KAAK,CAACF,GAAD,EAAMJ,cAAN,CAAZ;AACH;;AA7Fa;;AA8FjB;AAED,eAAef,WAAf","sourcesContent":["/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with \nDavid Babbit's mock OpenBanking APIs, hosted on Heroku.\nI like to call it the OpenBabbitt API.\n\n@author Michael Sanchez\n@see {@link https://github.com/babbtx/mock-simple-aspsp}\n*/\n\nclass OpenBanking {\n\n    /**\n    Configurations for the OpenBanking API. \n\n    @property {string} mockOBConsentHost Consent OpenBanking host /OpenBanking pointing to DataGovernance to secure data for consent enforcement.\n    @property {string} mockOBhost OpenBaking API host.\n    @property {string} mockOBAPIver OpenBanking API version.\n    @property {string} mockOBbalURI OpenBanking API account balances path.\n    @property {string} mockOBacctsURI OpenBanking API accounts path.\n    @property {string} xfrMoneyURI OpenBanking API transfer money path.\n    */\n    constructor() {\n        // Didn't abstract these since they shouldn't ever change. I say that now.\n        this.mockOBhost = \"https://babbtx-aspsp.herokuapp.com/OpenBanking\";\n        this.mockOBAPIver = \"/v2\";\n        this.mockOBbalURI = \"/balances\";\n        this.mockOBacctsURI = \"/accounts\";\n        this.xfrMoneyURI = \"/transferMoney?amount=\";\n    }\n\n    /** \n      Provision Banking Accounts:\n      Provisions new accounts and balances and updates the user entry in PingDirectory.\n      Design pattern debate: Whether to just return the accounts response (strict single responsiblilty), or\n      or as is now, fulfills all tasks of \"provisioning an acct\", which should include upating the user entry.\n\n      @param {string} token The access token for the authenticated user.\n      @return {object} The response JSON object.\n      */\n    async provisionAccounts(token) {\n        //If we had to time to be cool, we could have extracted the uid from the token.\n        console.info(\"OpenBanking.js\", \"Provisioning bank accounts.\");\n\n        let acctIdsArr = [];\n        var myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\n\n        var requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n        const url = this.mockOBhost + this.mockOBAPIver + this.mockOBacctsURI;\n\n        const response = await fetch(url, requestOptions);\n        const jsonData = await response.json();\n        return Promise.resolve(jsonData);\n    }\n\n    /** \n      Get Account Balances:\n      Retreives account balances to display on the Accounts Dashboard.\n\n      @param {string} token The access token for the authenticated user.\n      @return {object} The response JSON object.\n      */\n    getAccountBalances(token) {\n        console.info(\"OpenBanking.js\", \"Getting bank account balances.\");\n\n        var myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\n\n        var requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n        const url = this.mockOBhost + this.mockOBAPIver + this.mockOBbalURI;\n        return fetch(url, requestOptions);\n    }\n\n    /** \n    Transfer Money:\n    Initiates a money transfer between accounts.\n\n    @param {number} amount The dollar amount the user wants to transfer.\n    @param {string} token The access token from PF for the authenticated user.\n    @return {boolean} Success state of the transfer.\n    */\n    transferMoney(amount, token) {\n        console.info(\"OpenBanking.js\", \"Transferring money.\");\n\n        let myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n        const url = this.xfrMoneyURI + amount;\n        return fetch(url, requestOptions);\n    }\n};\n\nexport default OpenBanking; \n"]},"metadata":{},"sourceType":"module"}