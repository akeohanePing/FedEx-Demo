{"ast":null,"code":"import Session from '../Utils/Session';\n/**\nPING INTEGRATION:\nThis entire component is Ping developed.\nImplements functions to integrate with PingFederate\nOAuth-related API endpoints.\n\n@author Michael Sanchez\n*/\n\nclass PingOAuth {\n  constructor() {\n    this.pfAuthZAPIURI = \"/as/authorization.oauth2?\";\n    this.pfTokenAPIURI = \"/as/token.oauth2?\";\n    this.Session = new Session();\n  } // Didn't abstract these since they shouldn't ever change.\n\n\n  /** \n  Get AuthZ Code:\n  We defaulted all params except for uid, \n  which is user specifc. As a demo site, we only have 1\n  auth code client. But if we add more in the future, this\n  will already support that.\n   @param {string} client The OAuth client. Default is pa_wam .\n  @param {string} responseType The OAuth client-supported response type. Default is code.\n  @param {string} redirectURI The OAuth client-allowed redirect URI(s). Default is https://demo.bxfinance.org/app/banking .\n  @param {string} scopes Optional OAuth scopes. Default is an empty string.\n  @return {string} AuthZ code.\n  */\n  async getAuthCode({\n    client = \"pa_wam\",\n    responseType = \"code\",\n    redirectURI = process.env.REACT_APP_HOST + \"/app/banking\",\n    scopes = \"\"\n  } = {}) {\n    console.info(\"PingOAuth.js\", \"Getting an auth code for the getToken() call.\");\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlEncodedBody\");\n    myHeaders.append(\"Authorization\", \"Basic cGFfd2FtOjJGZWRlcmF0ZU0wcmU=\");\n    const urlEncodedBody = new URLSearchParams();\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlEncodedBody,\n      redirect: 'follow'\n    };\n    const url = this.pfAuthZAPIURI + \"response_type=\" + responseType + \"&client_id=\" + client + \"&redirect_uri=\" + redirectURI + \"&scope=\" + scopes;\n    const response = await fetch(url, requestOptions);\n    const authCode = response.url.substring(response.url.search(\"=\") + 1);\n    return authCode;\n  }\n  /** \n  Get Token:\n  We defaulted all params except for code,\n  which is code flow specifc. As a demo site, we only have 1\n  auth code client. But if we add more in the future, this\n  will already support that.\n   @param {string} client The OAuth client. Default is pa_wam .\n  @param {string} responseType The OAuth client-supported response type. Default is code.\n  @param {string} redirectURI The OAuth client-allowed redirect URI(s). Default is https://demo.bxfinance.org/app/banking .\n  @param {string} scopes Optional OAuth scopes. Default is an empty string.\n  @return {string} OAuth access token, base64 encoded.\n  */\n\n\n  async getToken({\n    uid,\n    client = \"pa_wam\",\n    responseType = \"code\",\n    redirectURI = process.env.REACT_APP_HOST + \"/app/banking\",\n    scopes = \"\"\n  } = {}) {\n    console.info(\"PingOAuth.js\", \"Getting a token.\");\n\n    if (responseType == \"code\") {\n      console.info(\"PingAuthN.js\", \"Using auth code grant\");\n      const authCode = await this.getAuthCode({\n        uid: this.Session.getAuthenticatedUserItem(\"uid\"),\n        scopes: scopes\n      });\n      let grantType = \"authorization_code\";\n      const myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/x-www-form-urlEncodedBody\");\n      myHeaders.append(\"Authorization\", \"Basic cGFfd2FtOjJGZWRlcmF0ZU0wcmU=\");\n      const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        redirect: 'follow'\n      };\n      const url = this.pfTokenAPIURI + \"grant_type=\" + grantType + \"&redirect_uri=\" + redirectURI + \"&code=\" + authCode;\n      const response = await fetch(url, requestOptions);\n      const jsonData = await response.json();\n      const token = await jsonData.access_token;\n      console.info(\"PingOAuth.js\", \"TOKEN: \" + token);\n      return token; //TODO there should only be one return statement.\n    } else if (client == \"marketingApp\" || client == \"anywealthadvisorApp\") {\n      console.info(\"PingAuthN.js\", \"Using client credentials grant\");\n      let grantType = \"client_credentials\";\n      var myHeaders = new Headers();\n      myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n      myHeaders.append(\"username\", uid);\n      var urlencoded = new URLSearchParams();\n      urlencoded.append(\"client_id\", client);\n      urlencoded.append(\"client_secret\", \"2Federate\");\n      var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: urlencoded,\n        redirect: 'follow'\n      };\n      const url = this.pfTokenAPIURI + \"grant_type=\" + grantType;\n      const response = await fetch(url, requestOptions);\n      const jsonData = await response.json();\n      const token = await jsonData.access_token;\n      console.info(\"PingAuthN.js Token =\", token);\n      return token;\n    } else {\n      // If you ended up here, you coded yourself into this problem.\n      throw new Error(\"PingOAuth.js\", \"Unexpected response_type or client exception in getToken().\");\n    }\n  }\n\n}\n\n;\nexport default PingOAuth;","map":{"version":3,"sources":["/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/src/components/Integration/PingOAuth.js"],"names":["Session","PingOAuth","constructor","pfAuthZAPIURI","pfTokenAPIURI","getAuthCode","client","responseType","redirectURI","process","env","REACT_APP_HOST","scopes","console","info","myHeaders","Headers","append","urlEncodedBody","URLSearchParams","requestOptions","method","headers","body","redirect","url","response","fetch","authCode","substring","search","getToken","uid","getAuthenticatedUserItem","grantType","jsonData","json","token","access_token","urlencoded","Error"],"mappings":"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","sourcesContent":["import Session from '../Utils/Session';\n\n/**\nPING INTEGRATION:\nThis entire component is Ping developed.\nImplements functions to integrate with PingFederate\nOAuth-related API endpoints.\n\n@author Michael Sanchez\n*/\n\nclass PingOAuth {\n    constructor() {\n        this.Session = new Session();\n    }\n\n    // Didn't abstract these since they shouldn't ever change.\n    pfAuthZAPIURI = \"/as/authorization.oauth2?\";\n    pfTokenAPIURI = \"/as/token.oauth2?\";\n\n    /** \n    Get AuthZ Code:\n    We defaulted all params except for uid, \n    which is user specifc. As a demo site, we only have 1\n    auth code client. But if we add more in the future, this\n    will already support that.\n\n    @param {string} client The OAuth client. Default is pa_wam .\n    @param {string} responseType The OAuth client-supported response type. Default is code.\n    @param {string} redirectURI The OAuth client-allowed redirect URI(s). Default is https://demo.bxfinance.org/app/banking .\n    @param {string} scopes Optional OAuth scopes. Default is an empty string.\n    @return {string} AuthZ code.\n    */\n    async getAuthCode({client = \"pa_wam\", responseType = \"code\", redirectURI = process.env.REACT_APP_HOST + \"/app/banking\", scopes = \"\"} = {}) {\n        console.info(\"PingOAuth.js\", \"Getting an auth code for the getToken() call.\");\n\n        const myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/x-www-form-urlEncodedBody\");\n        myHeaders.append(\"Authorization\", \"Basic cGFfd2FtOjJGZWRlcmF0ZU0wcmU=\");\n\n        const urlEncodedBody = new URLSearchParams();\n        \n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: urlEncodedBody,\n            redirect: 'follow'\n        };\n        \n        const url = this.pfAuthZAPIURI + \"response_type=\" + responseType + \"&client_id=\" + client + \"&redirect_uri=\" + redirectURI + \"&scope=\" + scopes;\n        const response = await fetch(url, requestOptions);\n        const authCode = response.url.substring(response.url.search(\"=\") + 1);\n\n        return authCode;\n    }\n\n    /** \n    Get Token:\n    We defaulted all params except for code,\n    which is code flow specifc. As a demo site, we only have 1\n    auth code client. But if we add more in the future, this\n    will already support that.\n\n    @param {string} client The OAuth client. Default is pa_wam .\n    @param {string} responseType The OAuth client-supported response type. Default is code.\n    @param {string} redirectURI The OAuth client-allowed redirect URI(s). Default is https://demo.bxfinance.org/app/banking .\n    @param {string} scopes Optional OAuth scopes. Default is an empty string.\n    @return {string} OAuth access token, base64 encoded.\n    */\n    async getToken({uid, client = \"pa_wam\", responseType = \"code\", redirectURI = process.env.REACT_APP_HOST + \"/app/banking\", scopes = \"\"} = {}) {\n        console.info(\"PingOAuth.js\", \"Getting a token.\");\n\n        if (responseType == \"code\") {\n            console.info(\"PingAuthN.js\", \"Using auth code grant\");\n            const authCode = await this.getAuthCode({uid:this.Session.getAuthenticatedUserItem(\"uid\"), scopes:scopes});\n            let grantType = \"authorization_code\";\n\n            const myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/x-www-form-urlEncodedBody\");\n            myHeaders.append(\"Authorization\", \"Basic cGFfd2FtOjJGZWRlcmF0ZU0wcmU=\");\n\n            const requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                redirect: 'follow'\n            };\n            const url = this.pfTokenAPIURI + \"grant_type=\" + grantType + \"&redirect_uri=\" + redirectURI + \"&code=\" + authCode;\n            const response = await fetch(url, requestOptions);\n            const jsonData = await response.json();\n            const token = await jsonData.access_token;\n            console.info(\"PingOAuth.js\", \"TOKEN: \" + token);\n\n            return token; //TODO there should only be one return statement.\n\n        } else if (client == \"marketingApp\" || client == \"anywealthadvisorApp\") {\n            console.info(\"PingAuthN.js\", \"Using client credentials grant\");\n            let grantType = \"client_credentials\";\n            var myHeaders = new Headers();\n            myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            myHeaders.append(\"username\", uid);\n\n            var urlencoded = new URLSearchParams();\n            urlencoded.append(\"client_id\", client);\n            urlencoded.append(\"client_secret\", \"2Federate\");\n\n            var requestOptions = {\n                method: 'POST',\n                headers: myHeaders,\n                body: urlencoded,\n                redirect: 'follow'\n            };\n\n            const url = this.pfTokenAPIURI + \"grant_type=\" + grantType;\n            const response = await fetch(url, requestOptions);\n            const jsonData = await response.json();\n            const token = await jsonData.access_token;\n            console.info(\"PingAuthN.js Token =\", token);\n\n            return token;\n                \n        } else {\n            // If you ended up here, you coded yourself into this problem.\n            throw new Error(\"PingOAuth.js\", \"Unexpected response_type or client exception in getToken().\");\n        }\n    }\n};\n\nexport default PingOAuth;\n"]},"metadata":{},"sourceType":"module"}