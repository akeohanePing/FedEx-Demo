{"ast":null,"code":"import _regeneratorRuntime from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with \nDavid Babbit's mock OpenBanking APIs, hosted on Heroku.\nI like to call it the OpenBabbitt API.\n\n@author Michael Sanchez\n@see {@link https://github.com/babbtx/mock-simple-aspsp}\n*/var OpenBanking=/*#__PURE__*/function(){/**\n    Configurations for the OpenBanking API. \n\n    @property {string} mockOBConsentHost Consent OpenBanking host /OpenBanking pointing to DataGovernance to secure data for consent enforcement.\n    @property {string} mockOBhost OpenBaking API host.\n    @property {string} mockOBAPIver OpenBanking API version.\n    @property {string} mockOBbalURI OpenBanking API account balances path.\n    @property {string} mockOBacctsURI OpenBanking API accounts path.\n    @property {string} xfrMoneyURI OpenBanking API transfer money path.\n    */function OpenBanking(){_classCallCheck(this,OpenBanking);// Didn't abstract these since they shouldn't ever change. I say that now.\nthis.mockOBhost=\"https://babbtx-aspsp.herokuapp.com/OpenBanking\";this.mockOBAPIver=\"/v2\";this.mockOBbalURI=\"/balances\";this.mockOBacctsURI=\"/accounts\";this.xfrMoneyURI=\"/transferMoney?amount=\";}/** \n      Provision Banking Accounts:\n      Provisions new accounts and balances and updates the user entry in PingDirectory.\n      Design pattern debate: Whether to just return the accounts response (strict single responsiblilty), or\n      or as is now, fulfills all tasks of \"provisioning an acct\", which should include upating the user entry.\n\n      @param {string} token The access token for the authenticated user.\n      @return {object} The response JSON object.\n      */_createClass(OpenBanking,[{key:\"provisionAccounts\",value:function(){var _provisionAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(token){var acctIdsArr,myHeaders,requestOptions,url,response,jsonData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0://If we had to time to be cool, we could have extracted the uid from the token.\nconsole.info(\"OpenBanking.js\",\"Provisioning bank accounts.\");acctIdsArr=[];myHeaders=new Headers();myHeaders.append(\"Authorization\",\"Bearer \"+token);requestOptions={method:'GET',headers:myHeaders,redirect:'follow'};url=this.mockOBhost+this.mockOBAPIver+this.mockOBacctsURI;_context.next=8;return fetch(url,requestOptions);case 8:response=_context.sent;_context.next=11;return response.json();case 11:jsonData=_context.sent;return _context.abrupt(\"return\",Promise.resolve(jsonData));case 13:case\"end\":return _context.stop();}}},_callee,this);}));function provisionAccounts(_x){return _provisionAccounts.apply(this,arguments);}return provisionAccounts;}()/** \n      Get Account Balances:\n      Retreives account balances to display on the Accounts Dashboard.\n\n      @param {string} token The access token for the authenticated user.\n      @return {object} The response JSON object.\n      */},{key:\"getAccountBalances\",value:function getAccountBalances(token){console.info(\"OpenBanking.js\",\"Getting bank account balances.\");var myHeaders=new Headers();myHeaders.append(\"Authorization\",\"Bearer \"+token);var requestOptions={method:'GET',headers:myHeaders,redirect:'follow'};var url=this.mockOBhost+this.mockOBAPIver+this.mockOBbalURI;return fetch(url,requestOptions);}/** \n    Transfer Money:\n    Initiates a money transfer between accounts.\n\n    @param {number} amount The dollar amount the user wants to transfer.\n    @param {string} token The access token from PF for the authenticated user.\n    @return {boolean} Success state of the transfer.\n    */},{key:\"transferMoney\",value:function transferMoney(amount,token){console.info(\"OpenBanking.js\",\"Transferring money.\");var myHeaders=new Headers();myHeaders.append(\"Authorization\",\"Bearer \"+token);var requestOptions={method:'GET',headers:myHeaders,redirect:'follow'};var url=this.xfrMoneyURI+amount;return fetch(url,requestOptions);}}]);return OpenBanking;}();;export default OpenBanking;","map":null,"metadata":{},"sourceType":"module"}