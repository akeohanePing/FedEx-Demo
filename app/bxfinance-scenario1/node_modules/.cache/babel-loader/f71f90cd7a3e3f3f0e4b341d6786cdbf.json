{"ast":null,"code":"var _jsxFileName = \"/Users/michaelsanchez/projects/TechnicalEnablement/fedex/BXFinance-Apps/bxfinance-scenario1/src/pages/accounts-dashboard.js\";\nimport React from 'react';\nimport { Container } from 'reactstrap'; // Components\n\nimport NavbarMain from '../components/NavbarMain';\nimport WelcomeBar from '../components/WelcomeBar';\nimport FooterMain from '../components/FooterMain';\nimport AccountsSubnav from '../components/AccountsSubnav';\nimport AccountsDropdown from '../components/AccountsDropdown';\nimport AccountsBalance from '../components/AccountsBalance';\nimport CardRewards from '../components/CardRewards';\nimport Session from '../components/Utils/Session';\n/* PING INTEGRATION */\n\nimport PingData from '../components/Integration/PingData';\n/* PING INTEGRATION */\n\nimport JSONSearch from '../components/Utils/JSONSearch';\n/* PING INTEGRATION */\n\nimport PingOAuth from '../components/Integration/PingOAuth';\n/* PING INTEGRATION: */\n\nimport OpenBanking from '../components/Integration/OpenBanking';\n/* PING INTEGRATION: */\n// Data\n\nimport data from '../data/accounts-dashboard.json'; // Styles\n\nimport \"../styles/pages/accounts.scss\";\n\nclass AccountsDashboard extends React.Component {\n  constructor() {\n    super();\n    /* BEGIN PING INTEGRATION: */\n\n    this.Session = new Session();\n    this.PingData = new PingData();\n    this.JSONSearch = new JSONSearch();\n    this.PingOAuth = new PingOAuth();\n    this.OpenBanking = new OpenBanking();\n    this.state = {\n      myAccounts: []\n    };\n    /* END PING INTEGRATION: */\n  }\n  /* BEGIN PING INTEGRATION: */\n\n\n  componentDidMount() {\n    let acctIDsArr = [];\n    let acctIDsArrSimple = [];\n    this.PingData.getUserEntry(this.Session.getAuthenticatedUserItem(\"uid\")).then(response => response.json()).then(jsonData => {\n      acctIDsArr = this.JSONSearch.findValues(jsonData, \"bxFinanceUserAccountIDs\");\n      acctIDsArrSimple = this.JSONSearch.findValues(acctIDsArr, \"ids\");\n      this.Session.setAuthenticatedUserItem(\"accts\", acctIDsArrSimple[0]); //TODO we can re-use this to save the getUserEntry() call. Only call PD if accts not in session.\n\n      if (acctIDsArr.length) {\n        // Existing user with accounts already provisioned, so just get balances.\n        console.info(\"Existing user:\", \"Getting account balances.\");\n        this.PingOAuth.getToken({\n          uid: this.Session.getAuthenticatedUserItem(\"uid\"),\n          scopes: 'urn:pingdirectory:consent'\n        }).then(token => {\n          this.Session.setAuthenticatedUserItem(\"AT\", token); //TODO need to re-use this token everywhere to avoid multiple getToken calls. Need handling for expired tokens though.\n\n          this.OpenBanking.getAccountBalances(token).then(response => response.json()).then(jsonData => {\n            this.setState({\n              myAccounts: jsonData.Data.Balance\n            });\n          }).catch(e => {\n            console.error(\"GetAccountBalances Exception\", e);\n          });\n        }).catch(e => {\n          console.error(\"GetToken Exception\", e);\n        });\n      } else {\n        // Brand new registered user, so we need to provision accounts and update PD, then fetch balances.\n        let acctIdsArr = [];\n        console.info(\"New User:\", \"Provisioning bank accounts and getting balances.\");\n        this.PingOAuth.getToken({\n          uid: this.Session.getAuthenticatedUserItem(\"uid\"),\n          scopes: 'urn:pingdirectory:consent'\n        }).then(token => {\n          this.Session.setAuthenticatedUserItem(\"AT\", token);\n          this.OpenBanking.provisionAccounts(token).then(result => {\n            acctIdsArr = this.JSONSearch.findValues(result, \"AccountId\");\n            this.PingData.updateUserEntry(acctIdsArr, this.Session.getAuthenticatedUserItem(\"uid\")).then(response => {\n              this.OpenBanking.getAccountBalances(this.Session.getAuthenticatedUserItem(\"AT\")).then(response => response.json()).then(jsonData => {\n                this.setState({\n                  myAccounts: jsonData.Data.Balance\n                });\n                acctIDsArr = this.JSONSearch.findValues(jsonData.Data.Balance, \"AccountId\");\n                this.Session.setAuthenticatedUserItem(\"accts\", acctIDsArr); //TODO can we reuse this? Are we anywhere already?\n              }).catch(e => {\n                console.error(\"Get Account Balances Exception\", e);\n              });\n            }).catch(e => {\n              console.error(\"Update User Entry Exception\", e);\n            });\n          }).catch(e => {\n            console.error(\"Provision Accounts Exception\", e);\n          });\n        }).catch(e => {\n          console.error(\"Get Token Exception\", e);\n        });\n      }\n    }).catch(e => {\n      console.error(\"Get User Entry Exception\", e);\n    });\n  }\n  /* END PING INTEGRATION: */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"accounts accounts-dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NavbarMain, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WelcomeBar, {\n      firstName: this.Session.getAuthenticatedUserItem('firstName'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }), \" \", /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, Object.keys(data.subnav).map(key => {\n      return /*#__PURE__*/React.createElement(AccountsSubnav, {\n        key: data.subnav[key].title,\n        subnav: data.subnav[key],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }\n      });\n    }), /*#__PURE__*/React.createElement(CardRewards, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"accounts-hdr\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, data.title), /*#__PURE__*/React.createElement(AccountsDropdown, {\n      text: data.dropdown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    })), Object.keys(data.balances).map(key => {\n      return /*#__PURE__*/React.createElement(AccountsBalance, {\n        key: data.balances[key].title,\n        balance: data.balances[key],\n        myAccounts: this.state.myAccounts,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }\n      });\n    })))), /*#__PURE__*/React.createElement(FooterMain, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default AccountsDashboard;","map":{"version":3,"sources":["/Users/michaelsanchez/projects/TechnicalEnablement/fedex/BXFinance-Apps/bxfinance-scenario1/src/pages/accounts-dashboard.js"],"names":["React","Container","NavbarMain","WelcomeBar","FooterMain","AccountsSubnav","AccountsDropdown","AccountsBalance","CardRewards","Session","PingData","JSONSearch","PingOAuth","OpenBanking","data","AccountsDashboard","Component","constructor","state","myAccounts","componentDidMount","acctIDsArr","acctIDsArrSimple","getUserEntry","getAuthenticatedUserItem","then","response","json","jsonData","findValues","setAuthenticatedUserItem","length","console","info","getToken","uid","scopes","token","getAccountBalances","setState","Data","Balance","catch","e","error","acctIdsArr","provisionAccounts","result","updateUserEntry","render","Object","keys","subnav","map","key","title","dropdown","balances"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,YAA1B,C,CAEA;;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AAAmD;;AACnD,OAAOC,QAAP,MAAqB,oCAArB;AAA2D;;AAC3D,OAAOC,UAAP,MAAuB,gCAAvB;AAAyD;;AACzD,OAAOC,SAAP,MAAsB,qCAAtB;AAA6D;;AAC7D,OAAOC,WAAP,MAAwB,uCAAxB;AAAiE;AAEjE;;AACA,OAAOC,IAAP,MAAiB,iCAAjB,C,CAEA;;AACA,OAAO,+BAAP;;AAEA,MAAMC,iBAAN,SAAgCf,KAAK,CAACgB,SAAtC,CAAgD;AAC9CC,EAAAA,WAAW,GAAG;AACZ;AACA;;AACA,SAAKR,OAAL,GAAe,IAAIA,OAAJ,EAAf;AACA,SAAKC,QAAL,GAAgB,IAAIA,QAAJ,EAAhB;AACA,SAAKC,UAAL,GAAkB,IAAIA,UAAJ,EAAlB;AACA,SAAKC,SAAL,GAAiB,IAAIA,SAAJ,EAAjB;AACA,SAAKC,WAAL,GAAmB,IAAIA,WAAJ,EAAnB;AACA,SAAKK,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE;AADD,KAAb;AAGA;AACD;AAED;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,gBAAgB,GAAG,EAAvB;AAEA,SAAKZ,QAAL,CAAca,YAAd,CAA2B,KAAKd,OAAL,CAAae,wBAAb,CAAsC,KAAtC,CAA3B,EACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,QAAQ,IAAI;AAChBP,MAAAA,UAAU,GAAG,KAAKV,UAAL,CAAgBkB,UAAhB,CAA2BD,QAA3B,EAAqC,yBAArC,CAAb;AACAN,MAAAA,gBAAgB,GAAG,KAAKX,UAAL,CAAgBkB,UAAhB,CAA2BR,UAA3B,EAAuC,KAAvC,CAAnB;AACA,WAAKZ,OAAL,CAAaqB,wBAAb,CAAsC,OAAtC,EAA+CR,gBAAgB,CAAC,CAAD,CAA/D,EAHgB,CAGqD;;AACrE,UAAID,UAAU,CAACU,MAAf,EAAuB;AACrB;AACAC,QAAAA,OAAO,CAACC,IAAR,CAAa,gBAAb,EAA+B,2BAA/B;AACA,aAAKrB,SAAL,CAAesB,QAAf,CAAwB;AAAEC,UAAAA,GAAG,EAAE,KAAK1B,OAAL,CAAae,wBAAb,CAAsC,KAAtC,CAAP;AAAqDY,UAAAA,MAAM,EAAE;AAA7D,SAAxB,EACGX,IADH,CACQY,KAAK,IAAI;AACb,eAAK5B,OAAL,CAAaqB,wBAAb,CAAsC,IAAtC,EAA4CO,KAA5C,EADa,CACuC;;AACpD,eAAKxB,WAAL,CAAiByB,kBAAjB,CAAoCD,KAApC,EACGZ,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,QAAQ,IAAI;AAChB,iBAAKW,QAAL,CAAc;AAAEpB,cAAAA,UAAU,EAAES,QAAQ,CAACY,IAAT,CAAcC;AAA5B,aAAd;AACD,WAJH,EAKGC,KALH,CAKSC,CAAC,IAAI;AACVX,YAAAA,OAAO,CAACY,KAAR,CAAc,8BAAd,EAA8CD,CAA9C;AACD,WAPH;AAQD,SAXH,EAYGD,KAZH,CAYSC,CAAC,IAAI;AACVX,UAAAA,OAAO,CAACY,KAAR,CAAc,oBAAd,EAAoCD,CAApC;AACD,SAdH;AAeD,OAlBD,MAkBO;AACL;AACA,YAAIE,UAAU,GAAG,EAAjB;AACAb,QAAAA,OAAO,CAACC,IAAR,CAAa,WAAb,EAA0B,kDAA1B;AACA,aAAKrB,SAAL,CAAesB,QAAf,CAAwB;AAAEC,UAAAA,GAAG,EAAE,KAAK1B,OAAL,CAAae,wBAAb,CAAsC,KAAtC,CAAP;AAAqDY,UAAAA,MAAM,EAAE;AAA7D,SAAxB,EACGX,IADH,CACQY,KAAK,IAAI;AACb,eAAK5B,OAAL,CAAaqB,wBAAb,CAAsC,IAAtC,EAA4CO,KAA5C;AACA,eAAKxB,WAAL,CAAiBiC,iBAAjB,CAAmCT,KAAnC,EACGZ,IADH,CACQsB,MAAM,IAAI;AACdF,YAAAA,UAAU,GAAG,KAAKlC,UAAL,CAAgBkB,UAAhB,CAA2BkB,MAA3B,EAAmC,WAAnC,CAAb;AACA,iBAAKrC,QAAL,CAAcsC,eAAd,CAA8BH,UAA9B,EAA0C,KAAKpC,OAAL,CAAae,wBAAb,CAAsC,KAAtC,CAA1C,EACGC,IADH,CACQC,QAAQ,IAAI;AAChB,mBAAKb,WAAL,CAAiByB,kBAAjB,CAAoC,KAAK7B,OAAL,CAAae,wBAAb,CAAsC,IAAtC,CAApC,EACGC,IADH,CACQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADpB,EAEGF,IAFH,CAEQG,QAAQ,IAAI;AAChB,qBAAKW,QAAL,CAAc;AAAEpB,kBAAAA,UAAU,EAAES,QAAQ,CAACY,IAAT,CAAcC;AAA5B,iBAAd;AACApB,gBAAAA,UAAU,GAAG,KAAKV,UAAL,CAAgBkB,UAAhB,CAA2BD,QAAQ,CAACY,IAAT,CAAcC,OAAzC,EAAkD,WAAlD,CAAb;AACA,qBAAKhC,OAAL,CAAaqB,wBAAb,CAAsC,OAAtC,EAA+CT,UAA/C,EAHgB,CAG4C;AAC7D,eANH,EAOGqB,KAPH,CAOSC,CAAC,IAAI;AACVX,gBAAAA,OAAO,CAACY,KAAR,CAAc,gCAAd,EAAgDD,CAAhD;AACD,eATH;AAUD,aAZH,EAaGD,KAbH,CAaSC,CAAC,IAAI;AACVX,cAAAA,OAAO,CAACY,KAAR,CAAc,6BAAd,EAA6CD,CAA7C;AACD,aAfH;AAgBD,WAnBH,EAoBGD,KApBH,CAoBSC,CAAC,IAAI;AACVX,YAAAA,OAAO,CAACY,KAAR,CAAc,8BAAd,EAA8CD,CAA9C;AACD,WAtBH;AAuBD,SA1BH,EA2BGD,KA3BH,CA2BSC,CAAC,IAAI;AACVX,UAAAA,OAAO,CAACY,KAAR,CAAc,qBAAd,EAAqCD,CAArC;AACD,SA7BH;AA8BD;AACF,KA3DH,EA2DKD,KA3DL,CA2DWC,CAAC,IAAI;AACZX,MAAAA,OAAO,CAACY,KAAR,CAAc,0BAAd,EAA0CD,CAA1C;AACD,KA7DH;AA8DD;AACD;;;AAEAM,EAAAA,MAAM,GAAG;AAEP,wBACE;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,UAAD;AAAY,MAAA,SAAS,EAAE,KAAKxC,OAAL,CAAae,wBAAb,CAAsC,WAAtC,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,oBAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI0B,MAAM,CAACC,IAAP,CAAYrC,IAAI,CAACsC,MAAjB,EAAyBC,GAAzB,CAA6BC,GAAG,IAAI;AAClC,0BACE,oBAAC,cAAD;AAAgB,QAAA,GAAG,EAAExC,IAAI,CAACsC,MAAL,CAAYE,GAAZ,EAAiBC,KAAtC;AAA6C,QAAA,MAAM,EAAEzC,IAAI,CAACsC,MAAL,CAAYE,GAAZ,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJD,CAFJ,eAQE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF,eAWE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKxC,IAAI,CAACyC,KAAV,CADF,eAEE,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEzC,IAAI,CAAC0C,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAMIN,MAAM,CAACC,IAAP,CAAYrC,IAAI,CAAC2C,QAAjB,EAA2BJ,GAA3B,CAA+BC,GAAG,IAAI;AACpC,0BACE,oBAAC,eAAD;AAAiB,QAAA,GAAG,EAAExC,IAAI,CAAC2C,QAAL,CAAcH,GAAd,EAAmBC,KAAzC;AAAgD,QAAA,OAAO,EAAEzC,IAAI,CAAC2C,QAAL,CAAcH,GAAd,CAAzD;AAA6E,QAAA,UAAU,EAAE,KAAKpC,KAAL,CAAWC,UAApG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD,KAJD,CANJ,CAXF,CADF,CAHF,eA8BE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA9BF,CADF;AAkCD;;AAzH6C;;AA2HhD,eAAeJ,iBAAf","sourcesContent":["import React from 'react'\nimport { Container } from 'reactstrap';\n\n// Components\nimport NavbarMain from '../components/NavbarMain';\nimport WelcomeBar from '../components/WelcomeBar';\nimport FooterMain from '../components/FooterMain';\nimport AccountsSubnav from '../components/AccountsSubnav';\nimport AccountsDropdown from '../components/AccountsDropdown';\nimport AccountsBalance from '../components/AccountsBalance';\nimport CardRewards from '../components/CardRewards';\nimport Session from '../components/Utils/Session'; /* PING INTEGRATION */\nimport PingData from '../components/Integration/PingData'; /* PING INTEGRATION */\nimport JSONSearch from '../components/Utils/JSONSearch'; /* PING INTEGRATION */\nimport PingOAuth from '../components/Integration/PingOAuth'; /* PING INTEGRATION: */\nimport OpenBanking from '../components/Integration/OpenBanking'; /* PING INTEGRATION: */\n\n// Data\nimport data from '../data/accounts-dashboard.json';\n\n// Styles\nimport \"../styles/pages/accounts.scss\";\n\nclass AccountsDashboard extends React.Component {\n  constructor() {\n    super();\n    /* BEGIN PING INTEGRATION: */\n    this.Session = new Session();\n    this.PingData = new PingData();\n    this.JSONSearch = new JSONSearch();\n    this.PingOAuth = new PingOAuth();\n    this.OpenBanking = new OpenBanking();\n    this.state = {\n      myAccounts: []\n    }\n    /* END PING INTEGRATION: */\n  }\n\n  /* BEGIN PING INTEGRATION: */\n  componentDidMount() {\n    let acctIDsArr = [];\n    let acctIDsArrSimple = [];\n\n    this.PingData.getUserEntry(this.Session.getAuthenticatedUserItem(\"uid\"))\n      .then(response => response.json())\n      .then(jsonData => {\n        acctIDsArr = this.JSONSearch.findValues(jsonData, \"bxFinanceUserAccountIDs\");\n        acctIDsArrSimple = this.JSONSearch.findValues(acctIDsArr, \"ids\");\n        this.Session.setAuthenticatedUserItem(\"accts\", acctIDsArrSimple[0]); //TODO we can re-use this to save the getUserEntry() call. Only call PD if accts not in session.\n        if (acctIDsArr.length) {\n          // Existing user with accounts already provisioned, so just get balances.\n          console.info(\"Existing user:\", \"Getting account balances.\");\n          this.PingOAuth.getToken({ uid: this.Session.getAuthenticatedUserItem(\"uid\"), scopes: 'urn:pingdirectory:consent' })\n            .then(token => {\n              this.Session.setAuthenticatedUserItem(\"AT\", token); //TODO need to re-use this token everywhere to avoid multiple getToken calls. Need handling for expired tokens though.\n              this.OpenBanking.getAccountBalances(token)\n                .then(response => response.json())\n                .then(jsonData => {\n                  this.setState({ myAccounts: jsonData.Data.Balance });\n                })\n                .catch(e => {\n                  console.error(\"GetAccountBalances Exception\", e)\n                });\n            })\n            .catch(e => {\n              console.error(\"GetToken Exception\", e);\n            });\n        } else {\n          // Brand new registered user, so we need to provision accounts and update PD, then fetch balances.\n          let acctIdsArr = [];\n          console.info(\"New User:\", \"Provisioning bank accounts and getting balances.\");\n          this.PingOAuth.getToken({ uid: this.Session.getAuthenticatedUserItem(\"uid\"), scopes: 'urn:pingdirectory:consent' })\n            .then(token => {\n              this.Session.setAuthenticatedUserItem(\"AT\", token);\n              this.OpenBanking.provisionAccounts(token)\n                .then(result => {\n                  acctIdsArr = this.JSONSearch.findValues(result, \"AccountId\");\n                  this.PingData.updateUserEntry(acctIdsArr, this.Session.getAuthenticatedUserItem(\"uid\"))\n                    .then(response => {\n                      this.OpenBanking.getAccountBalances(this.Session.getAuthenticatedUserItem(\"AT\"))\n                        .then(response => response.json())\n                        .then(jsonData => {\n                          this.setState({ myAccounts: jsonData.Data.Balance });\n                          acctIDsArr = this.JSONSearch.findValues(jsonData.Data.Balance, \"AccountId\");\n                          this.Session.setAuthenticatedUserItem(\"accts\", acctIDsArr); //TODO can we reuse this? Are we anywhere already?\n                        })\n                        .catch(e => {\n                          console.error(\"Get Account Balances Exception\", e)\n                        });\n                    })\n                    .catch(e => {\n                      console.error(\"Update User Entry Exception\", e)\n                    });\n                })\n                .catch(e => {\n                  console.error(\"Provision Accounts Exception\", e)\n                });\n            })\n            .catch(e => {\n              console.error(\"Get Token Exception\", e);\n            });\n        }\n      }).catch(e => {\n        console.error(\"Get User Entry Exception\", e);\n      });\n  }\n  /* END PING INTEGRATION: */\n\n  render() {\n\n    return (\n      <div className=\"accounts accounts-dashboard\">\n        <NavbarMain />\n        <WelcomeBar firstName={this.Session.getAuthenticatedUserItem('firstName')} /> {/* PING INTEGRATION: added passing of firstName prop. */}\n        <Container>\n          <div className=\"inner\">\n            <div className=\"sidebar\">\n              {\n                Object.keys(data.subnav).map(key => {\n                  return (\n                    <AccountsSubnav key={data.subnav[key].title} subnav={data.subnav[key]} />\n                  );\n                })\n              }\n              <CardRewards />\n            </div>\n            <div className=\"content\">\n              <div className=\"accounts-hdr\">\n                <h1>{data.title}</h1>\n                <AccountsDropdown text={data.dropdown} />\n              </div>\n              {\n                Object.keys(data.balances).map(key => {\n                  return (\n                    <AccountsBalance key={data.balances[key].title} balance={data.balances[key]} myAccounts={this.state.myAccounts} />\n                  );\n                })\n              }\n            </div>\n          </div>\n        </Container>\n        <FooterMain />\n      </div>\n    )\n  }\n}\nexport default AccountsDashboard"]},"metadata":{},"sourceType":"module"}