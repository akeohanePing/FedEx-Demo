{"ast":null,"code":"/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with the browser\nsession storage API to maintain user state during\nan authenticated session.\n\n@author Michael Sanchez\n@see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage}\n*/\nclass Session {\n  /** \n  Protect Page:\n  Ensures a user doesn't access pages when unauthenticated or \n  when not the right user type. As a Single Page Application (SPA), page requests do not\n  run through PingAccess, (not HTTP requests), so we need to replicate those access rules.\n   @param {boolean} loggedOut Whether the user is logged in or not.\n  @param {string} path Where the user is trying to go.\n  @param {string} userType AnyWealthAdvisor, AnyMarketing, or customer.\n  */\n  protectPage(loggedOut, path, userType) {\n    const advisorAllowedPaths = [\"/app/advisor\", \"/app/advisor/client\", \"/app/advisor/tracking\", \"/app/advisor/prospecting\", \"/app/advisor/other-services\"];\n    const marketingAllowedPaths = [\"/app/any-marketing\", \"/app/any-marketing/dashboard\", \"/app/any-marketing/client-profiles\", \"/app/any-marketing/tracking\", \"/app/any-marketing/equities-trading\"];\n    const homePaths = [\"/app/\", \"/app\"];\n    console.info(\"Session.js\", \"Checking access rules for type \" + userType + \" at \" + path); //They have to be logged in to be anywhere other than home.\n\n    if (loggedOut && !homePaths.includes(path)) {\n      console.info(\"Access rule\", \"Attempting to access protected page as unauthenticated user. Redirecting to home.\");\n      window.location.assign(homePaths[0]);\n    } else {\n      switch (userType) {\n        case \"AnyWealthAdvisor\":\n          if (!advisorAllowedPaths.includes(path)) {\n            console.info(\"Access Rule\", \"Attempt to access disallowed path for user type \" + userType + \". Redirecting to default.\");\n            window.location.assign(advisorAllowedPaths[0]);\n          }\n\n          break;\n\n        case \"AnyMarketing\":\n          if (!marketingAllowedPaths.includes(path)) {\n            console.info(\"Access Rule\", \"Attempt to access disallowed path for user type \" + userType + \". Redirecting to default.\");\n            window.location.assign(marketingAllowedPaths[0]);\n          }\n\n          break;\n\n        case \"customer\":\n          if (advisorAllowedPaths.includes(path) || marketingAllowedPaths.includes(path)) {\n            console.info(\"Access Rule\", \"Attempt to access disallowed path for user type \" + userType + \". Redirecting to default.\");\n            window.location.assign(\"/banking\"); //Default for a logged in user\n          }\n\n          break;\n\n        default:\n          console.warn(\"Unknown bxFinanceUserType\", \"Not authenticated yet.\");\n      }\n    }\n  }\n  /** \n  Get Authenticated User Item:\n  Gets an item from the current origin's session storage.\n   @param {string} key The item name in storage.\n  @return {string} DOM String.\n  */\n\n\n  getAuthenticatedUserItem(key) {\n    console.info(\"Session.js\", \"Getting a item from local browser session.\");\n    return sessionStorage.getItem(key);\n  }\n  /** \n  Set Authenticated User Item:\n  Sets an item in the current origin's sessions storage.\n   @param {string} key The item name to set in storage.\n  @param {string} value The string value of the key.\n  @return {boolean} Success state of item storage.\n  @throws {storageFullException} Particularly, in Mobile Safari \n                              (since iOS 5) it always throws when \n                              the user enters private mode. \n                              (Safari sets the quota to 0 bytes in \n                              private mode, unlike other browsers, \n                              which allow storage in private mode \n                              using separate data containers.)\n  */\n\n\n  setAuthenticatedUserItem(key, value) {\n    console.info(\"Session.js\", \"Saving an item into local browser session.\");\n    sessionStorage.setItem(key, value);\n    return true;\n  }\n  /** \n  Remove Authenticated User Item:\n  Removes an item from the current origin's session storage.\n   @param {string} key The item name in storage to remove.\n  @return {boolean} Success state of item removal from storage.\n  */\n\n\n  removeAuthenticatedUserItem(key) {\n    console.info(\"Session.js\", \"Removing an item from local browser session.\");\n    sessionStorage.removeItem(key);\n    return true;\n  }\n  /** \n  Clear User App Session:\n  Clears out everything in the current origin's session storage.\n   @return {void} Void. \n   */\n\n\n  clearUserAppSession() {\n    console.info(\"Session.js\", \"Removing local browser session.\");\n    sessionStorage.clear();\n  }\n  /** \n  Get Cookie:\n  We set a cookie when users check \"Remember Me\" when logging in.\n  We need to check for this cookie in a couple different places to set state.\n  \n  @param {string} cookieName The name of the cookie we want the value of.\n  @return {string} Cookie value, or an empty string if not found.\n  */\n\n\n  getCookie(cookieName) {\n    console.info(\"Session.js\", \"Getting a cookie value from the browser.\");\n    const name = cookieName + \"=\";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const ca = decodedCookie.split(';');\n\n    for (let i = 0; i < ca.length; i++) {\n      let c = ca[i];\n\n      while (c.charAt(0) == ' ') {\n        c = c.substring(1);\n      }\n\n      if (c.indexOf(name) == 0) {\n        return c.substring(name.length, c.length);\n      }\n    }\n\n    return \"\";\n  }\n\n}\n\n;\nexport default Session;","map":{"version":3,"sources":["/Users/michaelsanchez/projects/TechnicalEnablement/fedex/BXFinance-Apps/bxfinance-scenario1/src/components/Utils/Session.js"],"names":["Session","protectPage","loggedOut","path","userType","advisorAllowedPaths","marketingAllowedPaths","homePaths","console","info","includes","window","location","assign","warn","getAuthenticatedUserItem","key","sessionStorage","getItem","setAuthenticatedUserItem","value","setItem","removeAuthenticatedUserItem","removeItem","clearUserAppSession","clear","getCookie","cookieName","name","decodedCookie","decodeURIComponent","document","cookie","ca","split","i","length","c","charAt","substring","indexOf"],"mappings":"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","sourcesContent":["/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with the browser\nsession storage API to maintain user state during\nan authenticated session.\n\n@author Michael Sanchez\n@see {@link https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage}\n*/\n\nclass Session {\n\n    /** \n    Protect Page:\n    Ensures a user doesn't access pages when unauthenticated or \n    when not the right user type. As a Single Page Application (SPA), page requests do not\n    run through PingAccess, (not HTTP requests), so we need to replicate those access rules.\n\n    @param {boolean} loggedOut Whether the user is logged in or not.\n    @param {string} path Where the user is trying to go.\n    @param {string} userType AnyWealthAdvisor, AnyMarketing, or customer.\n    */\n   protectPage(loggedOut, path, userType) {\n       const advisorAllowedPaths = [\"/app/advisor\", \"/app/advisor/client\", \"/app/advisor/tracking\", \"/app/advisor/prospecting\", \"/app/advisor/other-services\"];\n       const marketingAllowedPaths = [\"/app/any-marketing\", \"/app/any-marketing/dashboard\", \"/app/any-marketing/client-profiles\", \"/app/any-marketing/tracking\", \"/app/any-marketing/equities-trading\"];\n       const homePaths = [\"/app/\", \"/app\"];\n       console.info(\"Session.js\", \"Checking access rules for type \" + userType + \" at \" + path);\n       \n       //They have to be logged in to be anywhere other than home.\n       if (loggedOut && (!homePaths.includes(path))) {\n           console.info(\"Access rule\", \"Attempting to access protected page as unauthenticated user. Redirecting to home.\")\n           window.location.assign(homePaths[0]);\n        } else {\n           switch (userType) {\n               case \"AnyWealthAdvisor\":\n                   if (!advisorAllowedPaths.includes(path)) {\n                       console.info(\"Access Rule\", \"Attempt to access disallowed path for user type \" + userType + \". Redirecting to default.\");\n                       window.location.assign(advisorAllowedPaths[0]);\n                   }\n                   break;\n               case \"AnyMarketing\":\n                   if (!marketingAllowedPaths.includes(path)) {\n                       console.info(\"Access Rule\", \"Attempt to access disallowed path for user type \" + userType + \". Redirecting to default.\");\n                       window.location.assign(marketingAllowedPaths[0]);\n                   }\n                   break;\n               case \"customer\":\n                   if (advisorAllowedPaths.includes(path) || marketingAllowedPaths.includes(path)) {\n                       console.info(\"Access Rule\", \"Attempt to access disallowed path for user type \" + userType + \". Redirecting to default.\");\n                       window.location.assign(\"/banking\"); //Default for a logged in user\n                   }\n                   break;\n               default:\n                   console.warn(\"Unknown bxFinanceUserType\", \"Not authenticated yet.\");\n           }\n        }        \n   }\n\n    /** \n    Get Authenticated User Item:\n    Gets an item from the current origin's session storage.\n\n    @param {string} key The item name in storage.\n    @return {string} DOM String.\n    */\n    getAuthenticatedUserItem(key) {\n        console.info(\"Session.js\", \"Getting a item from local browser session.\");\n\n        return sessionStorage.getItem(key);\n    }\n\n    /** \n    Set Authenticated User Item:\n    Sets an item in the current origin's sessions storage.\n\n    @param {string} key The item name to set in storage.\n    @param {string} value The string value of the key.\n    @return {boolean} Success state of item storage.\n    @throws {storageFullException} Particularly, in Mobile Safari \n                                (since iOS 5) it always throws when \n                                the user enters private mode. \n                                (Safari sets the quota to 0 bytes in \n                                private mode, unlike other browsers, \n                                which allow storage in private mode \n                                using separate data containers.)\n    */\n    setAuthenticatedUserItem(key, value) {\n        console.info(\"Session.js\", \"Saving an item into local browser session.\");\n\n        sessionStorage.setItem(key, value);\n        return true;\n    }\n\n    /** \n    Remove Authenticated User Item:\n    Removes an item from the current origin's session storage.\n\n    @param {string} key The item name in storage to remove.\n    @return {boolean} Success state of item removal from storage.\n    */\n    removeAuthenticatedUserItem(key) {\n        console.info(\"Session.js\", \"Removing an item from local browser session.\");\n\n        sessionStorage.removeItem(key);\n        return true;\n    }\n\n    /** \n    Clear User App Session:\n    Clears out everything in the current origin's session storage.\n\n    @return {void} Void. \n     */\n    clearUserAppSession() {\n        console.info(\"Session.js\", \"Removing local browser session.\");\n\n        sessionStorage.clear();\n    }\n\n    /** \n    Get Cookie:\n    We set a cookie when users check \"Remember Me\" when logging in.\n    We need to check for this cookie in a couple different places to set state.\n    \n    @param {string} cookieName The name of the cookie we want the value of.\n    @return {string} Cookie value, or an empty string if not found.\n    */\n    getCookie(cookieName) {\n        console.info(\"Session.js\", \"Getting a cookie value from the browser.\");\n\n        const name = cookieName + \"=\";\n        const decodedCookie = decodeURIComponent(document.cookie);\n        const ca = decodedCookie.split(';');\n        for (let i = 0; i < ca.length; i++) {\n            let c = ca[i];\n            while (c.charAt(0) == ' ') {\n                c = c.substring(1);\n            }\n            if (c.indexOf(name) == 0) {\n                return c.substring(name.length, c.length);\n            }\n        }\n        return \"\";\n    }\n};\n\nexport default Session;"]},"metadata":{},"sourceType":"module"}