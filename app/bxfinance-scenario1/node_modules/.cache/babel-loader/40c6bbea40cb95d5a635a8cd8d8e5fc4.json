{"ast":null,"code":"/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with PingData\nAPI endpoints.\n\n@author Michael Sanchez\n*/\nclass PingData {\n  constructor() {\n    this.pdReSTURI = \"/directory/v1/\";\n    this.pdRootDN = \"dc=bxfinance.org\";\n    this.pdPeopleRDN = 'ou=People,' + this.pdRootDN;\n    this.pdConsentURI = \"/consent\";\n    this.pdConsentVersion = \"/v1\";\n    this.pdConsentResource = \"/consents\";\n    this.pdSubtreeResource = \"/subtree?\";\n    this.dgScimURI = \"/scim\";\n    this.dgScimVersion = \"/v2\";\n    this.dgUsersResource = \"/Users\";\n    this.dgOpenBankingURI = \"/OpenBanking\";\n    this.dgOpenBankingVersion = \"/v2\";\n    this.dgBalancesResource = \"/balances\";\n  }\n\n  /** \n  Get User Entry:\n  Fetches a user record from PingDirectory.\n   @param {string} uid The uid from the user's directory entry.\n  @return {object} The response object.\n  */\n  getUserEntry(uid) {\n    const userRDN = 'uid=' + encodeURIComponent(uid);\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Authorization\", \"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\");\n    /* TODO this should be obfuscated somehow. */\n\n    const requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'manual'\n    };\n    const url = this.pdReSTURI + userRDN + ',' + this.pdPeopleRDN;\n    return fetch(url, requestOptions);\n  }\n  /** \n  Update User Entry:\n  Update user entry with bank accounts.\n   @param {array} acctIds An array of account IDs to add to the user entry.\n  @param {string} uid The uid of the user for which we are updating a user entry.\n  @return {boolean} Success state of the user account update.\n  */\n\n\n  async updateUserEntry(acctIds, uid) {\n    console.info(\"PingData.js\", \"Updating user entry in PD.\");\n    const userRDN = 'uid=' + uid;\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Authorization\", \"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\");\n    let updateObj = {\n      \"modifications\": [{\n        \"attributeName\": \"bxFinanceUserAccountIDs\",\n        \"modificationType\": \"set\",\n        \"values\": [{\n          \"ids\": []\n        }]\n      }]\n    };\n    updateObj.modifications[0].values[0].ids = acctIds;\n    const raw = JSON.stringify(updateObj);\n    const requestOptions = {\n      method: 'PATCH',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    }; //TODO add error handling here in case failed requset. Rare in our environment, butt still.\n\n    const url = this.pdReSTURI + userRDN + ',' + this.pdPeopleRDN;\n    const response = await fetch(url, requestOptions);\n    const jsonData = await response.json();\n    return Promise.resolve(jsonData);\n  }\n  /** \n  Get Searchable Users:\n  Fetches all users in the people DN for the suggestable search feature in the AnyAdvisor/Marketing portals.\n  We filter out user that have the attribute bxFinanceUserType, because they are not banking users, but partners in the demo.\n   @param {string} searchScope To what level in the directory to searchScope. Defaults to single level.\n  @param {number} limit The max number of records to return. You could get less based on number of records found or PingDirectory-configured limits. Defaults to 100.\n  @return {object} The response JSON object.\n  */\n\n\n  getSearchableUsers({\n    searchScope = \"singleLevel\",\n    limit = \"100\"\n  }) {\n    console.info(\"PingData.js\", \"Getting all searchable users (banking customers) from PD.\");\n    var myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\");\n    var requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    }; // TODO we need some attribute or way to filter user to only include ones created for demos.\n\n    const url = this.pdReSTURI + this.pdPeopleRDN + this.pdSubtreeResource + \"searchScope=\" + searchScope + \"&limit=\" + limit + \"&filter=not(bxFinanceUserType pr)\";\n    return fetch(url, requestOptions);\n  }\n  /** \n  Get User Consents:\n  This is called from customer apps for consent management from PingDirectory.\n   @param {string} token The access token for the authenticated user.\n  @param {string} uid The user's uid from their user record.\n  @param {string} definition The consent definition ID.\n  @return {object} Consent record in JSON format.\n  */\n\n\n  getUserConsents(token, uid, definition) {\n    console.info(\"PingData.js\", \"Getting user's consents from PD.\");\n    let myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n    const requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n    const url = this.pdConsentURI + this.pdConsentVersion + this.pdConsentResource + \"?subject=\" + encodeURIComponent(uid) + \"&definition=\" + definition;\n    return fetch(url, requestOptions);\n  }\n  /** \n  Create User Consent:\n  Creates the user's consent record in PingDirectory. \n   @param {string} token The access token for the authenticated user.\n  @param {object} consent The JSON object of consents to update the \"data\" property of the consent object.\n  @param {string} uid The uid of the user fo which we are creating a consent record.\n  @param {string} definition The consent definition ID.\n  @return {object} Consent record in JSON format.\n  */\n\n\n  createUserConsent(token, consent, uid, definition) {\n    console.info(\"PingData.js\", \"Creating user's consent record in PD.\");\n    let myHeaders = new Headers();\n    let consentObject = {};\n    let raw = \"\";\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n    myHeaders.append(\"Content-Type\", \"application/json\"); //  We build the consent object template for the specified definition, and then update the data field with user's consent choices.\n\n    if (definition == \"share-account-balances\") {\n      consentObject = {\n        \"status\": \"accepted\",\n        \"subject\": \"\",\n        \"actor\": \"\",\n        \"audience\": \"BXFinance\",\n        \"definition\": {\n          \"id\": \"\",\n          \"version\": \"0.1\",\n          \"locale\": \"en-us\"\n        },\n        \"titleText\": \"Share Account Balances\",\n        \"dataText\": \"Share Account Balances\",\n        \"purposeText\": \"Share Account Balances\",\n        \"data\": {\n          \"share-balance\": []\n        },\n        \"consentContext\": {}\n      };\n      consentObject.subject = uid;\n      consentObject.actor = uid;\n      consentObject.data[\"share-balance\"] = consent;\n      consentObject.definition.id = definition;\n    } else {\n      //share-comm-preferences\n      consentObject = {\n        \"status\": \"accepted\",\n        \"subject\": \"\",\n        \"actor\": \"\",\n        \"audience\": \"BXFinance\",\n        \"definition\": {\n          \"id\": \"\",\n          \"version\": \"0.1\",\n          \"locale\": \"en-us\"\n        },\n        \"titleText\": \"Share Comms Preferences\",\n        \"dataText\": \"Share Comms Preferences\",\n        \"purposeText\": \"Share Comms Preferences\",\n        \"data\": {},\n        \"consentContext\": {}\n      };\n      consentObject.subject = uid;\n      consentObject.actor = uid;\n      consentObject.data = consent;\n      consentObject.definition.id = definition;\n    }\n\n    raw = JSON.stringify(consentObject);\n    const requestOptions = {\n      method: 'POST',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    const url = this.pdConsentURI + this.pdConsentVersion + this.pdConsentResource;\n    return fetch(url, requestOptions);\n  }\n  /** \n  Update User Consent:\n  Updates the user's consent record in PingDirectory.\n   @param {string} token The access token for the authenticated user.\n  @param {object} consent The JSON object of consents to update the \"data\" property of the consent object.\n  @param {string} consentId The id of the user's existing consent record.\n  @param {string} definition The consent definition ID.\n  @return {object} Consent record in JSON format.\n  */\n\n\n  updateUserConsent(token, consent, consentId, definition) {\n    console.info(\"PingData.js\", \"Updating user's consent record' in PD.\");\n    let myHeaders = new Headers();\n    let consentObject = {\n      \"data\": {}\n    };\n    let raw = \"\";\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    console.info(\"Updating it to:\", consent); //  We build the consent object template for the specified definition, and then update the data field with user's consent choices.\n\n    if (definition == \"share-account-balances\") {\n      const status = consent.length > 0 ? \"accepted\" : \"revoked\";\n      consentObject = {\n        \"status\": status,\n        \"data\": {\n          \"share-balance\": []\n        }\n      };\n      consentObject.data[\"share-balance\"] = consent;\n    } else {\n      //share-comm-preferences\n      let status = \"revoked\";\n      let consentValues = Object.values(consent);\n      status = consentValues.find(val => val === true) ? \"accepted\" : \"revoked\";\n      consentObject = {\n        \"status\": status,\n        \"data\": {}\n      };\n      consentObject.data = consent;\n    }\n\n    raw = JSON.stringify(consentObject);\n    const requestOptions = {\n      method: 'PATCH',\n      headers: myHeaders,\n      body: raw,\n      redirect: 'follow'\n    };\n    const url = this.pdConsentURI + this.pdConsentVersion + this.pdConsentResource + \"/\" + consentId;\n    return fetch(url, requestOptions);\n  }\n  /** \n  Get User Consented Data:\n  This is called from AnyWealth Advisor and AnyMarketing portals. Uses DataGovernance for consent enforcement.\n  \n  @param {string} token The access token of the marketingApp.\n  @param {string} forWhom Whether this DataGovernance call is for an AnyWealthAdvisor or AnyMarketing rep.\n  @param {string} uid The uid of the user data being requested.\n  @return {object} The response JSON object.\n  */\n\n\n  async getUserConsentedData(token, forWhom, uid) {\n    console.info(\"PingData.js\", \"Getting consented data through DG.\");\n    const myHeaders = new Headers();\n    myHeaders.append(\"Authorization\", \"Bearer \" + token);\n    let url;\n    var requestOptions = {\n      method: 'GET',\n      headers: myHeaders,\n      redirect: 'follow'\n    };\n\n    if (forWhom == \"marketing\") {\n      console.info(\"Getting AnyMarketing consent data.\");\n      const filterValue = '\\\"' + uid + '\\\"';\n      url = this.dgScimURI + this.dgScimVersion + this.dgUsersResource + \"?filter=uid eq \" + encodeURIComponent(filterValue);\n    } else {\n      //advisor\n      console.info(\"Getting AnyWealth Advisor consent data.\");\n      url = this.dgOpenBankingURI + this.dgOpenBankingVersion + this.dgBalancesResource;\n    }\n\n    const response = await fetch(url, requestOptions);\n    const jsonResponse = await response.json();\n    return jsonResponse;\n  }\n\n}\n\n;\nexport default PingData;","map":{"version":3,"sources":["/Users/andrewkeohane/Documents/fedex/BXFinance-Apps/bxfinance-scenario1/src/components/Integration/PingData.js"],"names":["PingData","pdReSTURI","pdRootDN","pdPeopleRDN","pdConsentURI","pdConsentVersion","pdConsentResource","pdSubtreeResource","dgScimURI","dgScimVersion","dgUsersResource","dgOpenBankingURI","dgOpenBankingVersion","dgBalancesResource","getUserEntry","uid","userRDN","encodeURIComponent","myHeaders","Headers","append","requestOptions","method","headers","redirect","url","fetch","updateUserEntry","acctIds","console","info","updateObj","modifications","values","ids","raw","JSON","stringify","body","response","jsonData","json","Promise","resolve","getSearchableUsers","searchScope","limit","getUserConsents","token","definition","createUserConsent","consent","consentObject","subject","actor","data","id","updateUserConsent","consentId","status","length","consentValues","Object","find","val","getUserConsentedData","forWhom","filterValue","jsonResponse"],"mappings":"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","sourcesContent":["/**\nPING INTEGRATION:\nThis entire component is Ping-developed.\nImplements functions to integrate with PingData\nAPI endpoints.\n\n@author Michael Sanchez\n*/\n\nclass PingData {\n\n    // Didn't abstract these since they shouldn't ever change. Right??? Maybe move these to JSON data file?\n    pdReSTURI = \"/directory/v1/\"; //TODO breakout the version segment to its own variable in case it changes.\n    pdRootDN = \"dc=bxfinance.org\";\n    pdPeopleRDN = 'ou=People,' + this.pdRootDN;\n    pdConsentURI = \"/consent\";\n    pdConsentVersion = \"/v1\";\n    pdConsentResource = \"/consents\";\n    pdSubtreeResource = \"/subtree?\";\n    dgScimURI = \"/scim\";\n    dgScimVersion = \"/v2\";\n    dgUsersResource = \"/Users\"\n    dgOpenBankingURI = \"/OpenBanking\";\n    dgOpenBankingVersion = \"/v2\";\n    dgBalancesResource = \"/balances\";\n    \n    /** \n    Get User Entry:\n    Fetches a user record from PingDirectory.\n\n    @param {string} uid The uid from the user's directory entry.\n    @return {object} The response object.\n    */\n    getUserEntry(uid) {\n        const userRDN = 'uid=' + encodeURIComponent(uid);\n        const myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        myHeaders.append(\"Authorization\", \"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\"); /* TODO this should be obfuscated somehow. */\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'manual'\n        };\n        const url = this.pdReSTURI + userRDN + ',' + this.pdPeopleRDN;\n        return fetch(url, requestOptions);\n    }\n\n    /** \n    Update User Entry:\n    Update user entry with bank accounts.\n\n    @param {array} acctIds An array of account IDs to add to the user entry.\n    @param {string} uid The uid of the user for which we are updating a user entry.\n    @return {boolean} Success state of the user account update.\n    */\n    async updateUserEntry(acctIds, uid) {\n        console.info(\"PingData.js\", \"Updating user entry in PD.\");\n\n        const userRDN = 'uid=' + uid;\n        const myHeaders = new Headers();\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        myHeaders.append(\"Authorization\", \"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\");\n\n        let updateObj = { \"modifications\": [{ \"attributeName\": \"bxFinanceUserAccountIDs\", \"modificationType\": \"set\", \"values\": [{ \"ids\": [] }] }] };\n        updateObj.modifications[0].values[0].ids = acctIds;\n\n        const raw = JSON.stringify(updateObj);\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n\n        //TODO add error handling here in case failed requset. Rare in our environment, butt still.\n        const url = this.pdReSTURI + userRDN + ',' + this.pdPeopleRDN;\n        const response = await fetch(url, requestOptions);\n        const jsonData = await response.json();\n        return Promise.resolve(jsonData);\n    }\n\n    /** \n    Get Searchable Users:\n    Fetches all users in the people DN for the suggestable search feature in the AnyAdvisor/Marketing portals.\n    We filter out user that have the attribute bxFinanceUserType, because they are not banking users, but partners in the demo.\n\n    @param {string} searchScope To what level in the directory to searchScope. Defaults to single level.\n    @param {number} limit The max number of records to return. You could get less based on number of records found or PingDirectory-configured limits. Defaults to 100.\n    @return {object} The response JSON object.\n    */\n    getSearchableUsers({ searchScope = \"singleLevel\", limit = \"100\" }) {\n        console.info(\"PingData.js\", \"Getting all searchable users (banking customers) from PD.\");\n\n        var myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Basic Y249ZG1hbmFnZXI6MkZlZGVyYXRlTTByZQ==\");\n\n        var requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n        // TODO we need some attribute or way to filter user to only include ones created for demos.\n        const url = this.pdReSTURI + this.pdPeopleRDN + this.pdSubtreeResource + \"searchScope=\" + searchScope + \"&limit=\" + limit + \"&filter=not(bxFinanceUserType pr)\";\n\n        return fetch(url, requestOptions);\n    }\n\n    /** \n    Get User Consents:\n    This is called from customer apps for consent management from PingDirectory.\n\n    @param {string} token The access token for the authenticated user.\n    @param {string} uid The user's uid from their user record.\n    @param {string} definition The consent definition ID.\n    @return {object} Consent record in JSON format.\n    */\n    getUserConsents(token, uid, definition) {\n        console.info(\"PingData.js\", \"Getting user's consents from PD.\");\n\n        let myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\n\n        const requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n        const url = this.pdConsentURI + this.pdConsentVersion + this.pdConsentResource + \"?subject=\" + encodeURIComponent(uid) + \"&definition=\" + definition;\n        return fetch(url, requestOptions);\n    }\n\n    /** \n    Create User Consent:\n    Creates the user's consent record in PingDirectory. \n\n    @param {string} token The access token for the authenticated user.\n    @param {object} consent The JSON object of consents to update the \"data\" property of the consent object.\n    @param {string} uid The uid of the user fo which we are creating a consent record.\n    @param {string} definition The consent definition ID.\n    @return {object} Consent record in JSON format.\n    */\n    createUserConsent(token, consent, uid, definition) {\n        console.info(\"PingData.js\", \"Creating user's consent record in PD.\");\n\n        let myHeaders = new Headers();\n        let consentObject = {};\n        let raw = \"\";\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\n        myHeaders.append(\"Content-Type\", \"application/json\");\n\n        //  We build the consent object template for the specified definition, and then update the data field with user's consent choices.\n        if (definition == \"share-account-balances\") {\n            consentObject = { \"status\": \"accepted\", \"subject\": \"\", \"actor\": \"\", \"audience\": \"BXFinance\", \"definition\": { \"id\": \"\", \"version\": \"0.1\", \"locale\": \"en-us\" }, \"titleText\": \"Share Account Balances\", \"dataText\": \"Share Account Balances\", \"purposeText\": \"Share Account Balances\", \"data\": { \"share-balance\": [] }, \"consentContext\": {} }\n            consentObject.subject = uid;\n            consentObject.actor = uid;\n            consentObject.data[\"share-balance\"] = consent;\n            consentObject.definition.id = definition;\n        } else { //share-comm-preferences\n            consentObject = { \"status\": \"accepted\", \"subject\": \"\", \"actor\": \"\", \"audience\": \"BXFinance\", \"definition\": { \"id\": \"\", \"version\": \"0.1\", \"locale\": \"en-us\" }, \"titleText\": \"Share Comms Preferences\", \"dataText\": \"Share Comms Preferences\", \"purposeText\": \"Share Comms Preferences\", \"data\": {}, \"consentContext\": {} };\n            consentObject.subject = uid;\n            consentObject.actor = uid;\n            consentObject.data = consent;\n            consentObject.definition.id = definition;\n        }\n        raw = JSON.stringify(consentObject);\n\n        const requestOptions = {\n            method: 'POST',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n        const url = this.pdConsentURI + this.pdConsentVersion + this.pdConsentResource;\n        return fetch(url, requestOptions);\n    }\n\n    /** \n    Update User Consent:\n    Updates the user's consent record in PingDirectory.\n\n    @param {string} token The access token for the authenticated user.\n    @param {object} consent The JSON object of consents to update the \"data\" property of the consent object.\n    @param {string} consentId The id of the user's existing consent record.\n    @param {string} definition The consent definition ID.\n    @return {object} Consent record in JSON format.\n    */\n    updateUserConsent(token, consent, consentId, definition) {\n        console.info(\"PingData.js\", \"Updating user's consent record' in PD.\");\n\n        let myHeaders = new Headers();\n        let consentObject = { \"data\": {} };\n        let raw = \"\";\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\n        myHeaders.append(\"Content-Type\", \"application/json\");\n        console.info(\"Updating it to:\", consent);\n        \n        //  We build the consent object template for the specified definition, and then update the data field with user's consent choices.\n        if (definition == \"share-account-balances\") {\n            const status = consent.length > 0 ? \"accepted\" : \"revoked\";\n            consentObject = { \"status\": status, \"data\": { \"share-balance\": [] } };\n            consentObject.data[\"share-balance\"] = consent;\n        } else { //share-comm-preferences\n            let status = \"revoked\";\n            let consentValues = Object.values(consent);\n            status = consentValues.find(val => val === true) ? \"accepted\" : \"revoked\";\n            consentObject = { \"status\": status, \"data\": {} };\n            consentObject.data = consent;\n        }\n        raw = JSON.stringify(consentObject);\n\n        const requestOptions = {\n            method: 'PATCH',\n            headers: myHeaders,\n            body: raw,\n            redirect: 'follow'\n        };\n        const url = this.pdConsentURI + this.pdConsentVersion + this.pdConsentResource + \"/\" + consentId;\n        return fetch(url, requestOptions);\n    }\n\n    /** \n    Get User Consented Data:\n    This is called from AnyWealth Advisor and AnyMarketing portals. Uses DataGovernance for consent enforcement.\n    \n    @param {string} token The access token of the marketingApp.\n    @param {string} forWhom Whether this DataGovernance call is for an AnyWealthAdvisor or AnyMarketing rep.\n    @param {string} uid The uid of the user data being requested.\n    @return {object} The response JSON object.\n    */\n    async getUserConsentedData(token, forWhom, uid) {\n        console.info(\"PingData.js\", \"Getting consented data through DG.\");\n        const myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Bearer \" + token);\n        let url;\n    \n        var requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n        };\n        \n        if (forWhom == \"marketing\") {\n            console.info(\"Getting AnyMarketing consent data.\");\n            const filterValue = '\\\"' + uid + '\\\"';\n            url = this.dgScimURI + this.dgScimVersion + this.dgUsersResource + \"?filter=uid eq \" + encodeURIComponent(filterValue);\n        } else {//advisor\n            console.info(\"Getting AnyWealth Advisor consent data.\");\n            url = this.dgOpenBankingURI + this.dgOpenBankingVersion + this.dgBalancesResource\n        }\n        const response = await fetch(url, requestOptions);\n        const jsonResponse = await response.json();\n        return jsonResponse;\n    }\n    \n};\n\nexport default PingData;\n"]},"metadata":{},"sourceType":"module"}