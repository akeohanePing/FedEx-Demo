{"ast":null,"code":"/** \nPING INTEGRATION:\nA recursive JSON search algorithm.\nOriginally written by shakhal in classic JS.\nRefactored to ES6 by dr-mohamed-benkhalifa.\n\n@author dr-mohamed-benkhalifa\n@see https://gist.github.com/shakhal/3cf5402fc61484d58c8d\n*/\nclass JSONSearch {\n  /**\n  JSONSearch:\n  Find values by key in a JSON object.\n  \n  @param {object} obj The JSON object to be searched recursively.\n  @param {string} key The key for which to search.\n  @return {array} An array of search results.\n  */\n  findValues(obj, key) {\n    console.info(\"JSONSearch.js\", \"Recursively searching your object for \" + key);\n    let list = [];\n    if (!obj) return list;\n\n    if (obj instanceof Array) {\n      for (var i in obj) {\n        list = list.concat(this.findValues(obj[i], key));\n      }\n\n      return list;\n    }\n\n    if (obj[key]) list.push(obj[key]);\n\n    if (typeof obj == \"object\" && obj !== null) {\n      let children = Object.keys(obj);\n\n      if (children.length > 0) {\n        for (let i = 0; i < children.length; i++) {\n          list = list.concat(this.findValues(obj[children[i]], key));\n        }\n      }\n    }\n\n    return list;\n  }\n\n}\n\n;\nexport default JSONSearch;","map":{"version":3,"sources":["/Users/michaelsanchez/projects/TechnicalEnablement/fedex/BXFinance-Apps/bxfinance-scenario1/src/components/Utils/JSONSearch.js"],"names":["JSONSearch","findValues","obj","key","console","info","list","Array","i","concat","push","children","Object","keys","length"],"mappings":"AAAA;;;;;;;;;AAUA,MAAMA,UAAN,CAAiB;AAEb;;;;;;;;AAQAC,EAAAA,UAAU,CAACC,GAAD,EAAMC,GAAN,EAAW;AACjBC,IAAAA,OAAO,CAACC,IAAR,CAAa,eAAb,EAA8B,2CAA2CF,GAAzE;AAEA,QAAIG,IAAI,GAAG,EAAX;AACA,QAAI,CAACJ,GAAL,EAAU,OAAOI,IAAP;;AACV,QAAIJ,GAAG,YAAYK,KAAnB,EAA0B;AACtB,WAAK,IAAIC,CAAT,IAAcN,GAAd,EAAmB;AACfI,QAAAA,IAAI,GAAGA,IAAI,CAACG,MAAL,CAAY,KAAKR,UAAL,CAAgBC,GAAG,CAACM,CAAD,CAAnB,EAAwBL,GAAxB,CAAZ,CAAP;AACH;;AACD,aAAOG,IAAP;AACH;;AACD,QAAIJ,GAAG,CAACC,GAAD,CAAP,EAAcG,IAAI,CAACI,IAAL,CAAUR,GAAG,CAACC,GAAD,CAAb;;AAEd,QAAK,OAAOD,GAAP,IAAc,QAAf,IAA6BA,GAAG,KAAK,IAAzC,EAAgD;AAC5C,UAAIS,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYX,GAAZ,CAAf;;AACA,UAAIS,QAAQ,CAACG,MAAT,GAAkB,CAAtB,EAAyB;AACrB,aAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,QAAQ,CAACG,MAA7B,EAAqCN,CAAC,EAAtC,EAA0C;AACtCF,UAAAA,IAAI,GAAGA,IAAI,CAACG,MAAL,CAAY,KAAKR,UAAL,CAAgBC,GAAG,CAACS,QAAQ,CAACH,CAAD,CAAT,CAAnB,EAAkCL,GAAlC,CAAZ,CAAP;AACH;AACJ;AACJ;;AACD,WAAOG,IAAP;AACH;;AAhCY;;AAiChB;AAED,eAAeN,UAAf","sourcesContent":["/** \nPING INTEGRATION:\nA recursive JSON search algorithm.\nOriginally written by shakhal in classic JS.\nRefactored to ES6 by dr-mohamed-benkhalifa.\n\n@author dr-mohamed-benkhalifa\n@see https://gist.github.com/shakhal/3cf5402fc61484d58c8d\n*/\n\nclass JSONSearch { \n\n    /**\n    JSONSearch:\n    Find values by key in a JSON object.\n    \n    @param {object} obj The JSON object to be searched recursively.\n    @param {string} key The key for which to search.\n    @return {array} An array of search results.\n    */\n    findValues(obj, key) {\n        console.info(\"JSONSearch.js\", \"Recursively searching your object for \" + key);\n\n        let list = [];\n        if (!obj) return list;\n        if (obj instanceof Array) {\n            for (var i in obj) {\n                list = list.concat(this.findValues(obj[i], key));\n            }\n            return list;\n        }\n        if (obj[key]) list.push(obj[key]);\n\n        if ((typeof obj == \"object\") && (obj !== null)) {\n            let children = Object.keys(obj);\n            if (children.length > 0) {\n                for (let i = 0; i < children.length; i++) {\n                    list = list.concat(this.findValues(obj[children[i]], key));\n                }\n            }\n        }\n        return list;\n    }\n};\n\nexport default JSONSearch;\n"]},"metadata":{},"sourceType":"module"}